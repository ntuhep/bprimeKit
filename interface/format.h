/*******************************************************************************
*
*  Filename    : format.h
*  Description : The branch format for the bprimeKit nTuple
*
*******************************************************************************/
#ifndef __BPRIMEKIT_FORMAT_H__
#define __BPRIMEKIT_FORMAT_H__

// ------------------------------  Required libraries  -------------------------------
#include "TriggerBooking.h"
#include <TTree.h>
#include <vector>

// -------------------------------  Size limitations  --------------------------------
#define MAX_LEPTONS        256
#define MAX_TRACKS         256
#define MAX_JETS           128
#define MAX_PHOTONS        128
#define MAX_GENS           128
#define MAX_LHE            256
#define MAX_Vertices       256
#define MAX_BX             128
#define MAX_TRGOBJS        64


class EvtInfoBranches
{
public:
  Int_t RunNo;
  ULong64_t EvtNo;
  Int_t BxNo;
  Int_t LumiNo;
  Int_t Orbit;
  Int_t McFlag;
  Int_t EventTime;
  Bool_t Flag_METFilter;
  Float_t Rho;
  Float_t RhoNoFastJet;
  Float_t BeamSpotX;
  Float_t BeamSpotY;
  Float_t BeamSpotZ;
  Float_t BSsigmaZ;
  Float_t PrefiringWeight;
  Float_t PrefiringWeightUp;
  Float_t PrefiringWeightDown;
  Int_t nBX;
  Int_t nPU [MAX_BX];
  Int_t BXPU [MAX_BX];
  Float_t TrueIT [MAX_BX];
  Float_t PFMET;
  Float_t PFMETPhi;
  Float_t PFMETType1CorrPtShiftJetEnUp;
  Float_t PFMETType1CorrPtShiftJetEnDown;
  Float_t PFMETType1CorrPtShiftJetResUp;
  Float_t PFMETType1CorrPtShiftJetResDown;
  Float_t PFMETType1CorrPtShiftUnclusteredEnUp;
  Float_t PFMETType1CorrPtShiftUnclusteredEnDown;
  Float_t PFMETType1CorrPhiShiftJetEnUp;
  Float_t PFMETType1CorrPhiShiftJetEnDown;
  Float_t PFMETType1CorrPhiShiftJetResUp;
  Float_t PFMETType1CorrPhiShiftJetResDown;
  Float_t PFMETType1CorrPhiShiftUnclusteredEnUp;
  Float_t PFMETType1CorrPhiShiftUnclusteredEnDown;
  Float_t PFRawMET;
  Float_t PFRawMETPhi;
  Float_t PFSumEt;
  Float_t PFMETSig;
  Float_t PFMETlongitudinal;
  Float_t PFMETRealSig;
  Float_t PFGenMET;
  Float_t PFGenMETPhi;
  Float_t PFMETx;
  Float_t PFMETy;
  Float_t PuppiMET;
  Float_t PuppiMETPhi;
  Float_t PuppiMETType1CorrPtShiftJetEnUp;
  Float_t PuppiMETType1CorrPtShiftJetEnDown;
  Float_t PuppiMETType1CorrPtShiftJetResUp;
  Float_t PuppiMETType1CorrPtShiftJetResDown;
  Float_t PuppiMETType1CorrPtShiftUnclusteredEnUp;
  Float_t PuppiMETType1CorrPtShiftUnclusteredEnDown;
  Float_t PuppiMETType1CorrPhiShiftJetEnUp;
  Float_t PuppiMETType1CorrPhiShiftJetEnDown;
  Float_t PuppiMETType1CorrPhiShiftJetResUp;
  Float_t PuppiMETType1CorrPhiShiftJetResDown;
  Float_t PuppiMETType1CorrPhiShiftUnclusteredEnUp;
  Float_t PuppiMETType1CorrPhiShiftUnclusteredEnDown;
  Float_t PuppiRawMET;
  Float_t PuppiRawMETPhi;
  Float_t PuppiSumEt;
  Float_t PuppiMETSig;
  Float_t PuppiMETlongitudinal;
  Float_t PuppiMETRealSig;
  Float_t PuppiGenMET;
  Float_t PuppiGenMETPhi;
  Float_t PuppiMETx;
  Float_t PuppiMETy;

  void
  RegisterTree( TTree* root, const std::string& name = "EvtInfo" )
  {
    root->Branch( ( name+".RunNo" ).c_str(),                                     &RunNo,                                     ( name+"RunNo/I" ).c_str() );
    root->Branch( ( name+".EvtNo" ).c_str(),                                     &EvtNo,                                     ( name+"EvtNo/l" ).c_str() );
    root->Branch( ( name+".BxNo" ).c_str(),                                      &BxNo,                                      ( name+"BxNo/I" ).c_str() );
    root->Branch( ( name+".LumiNo" ).c_str(),                                    &LumiNo,                                    ( name+"LumiNo/I" ).c_str() );
    root->Branch( ( name+".Orbit" ).c_str(),                                     &Orbit,                                     ( name+"Orbit/I" ).c_str() );
    root->Branch( ( name+".McFlag" ).c_str(),                                    &McFlag,                                    ( name+"McFlag/I" ).c_str() );
    root->Branch( ( name+".EventTime" ).c_str(),                                 &EventTime,                                 ( name+"EventTime/I" ).c_str() );
    root->Branch( ( name+".Flag_METFilter" ).c_str(),                            &Flag_METFilter,                            ( name+"Flag_METFilter/O" ).c_str() );
    root->Branch( ( name+".Rho" ).c_str(),                                       &Rho,                                       ( name+"Rho/F" ).c_str() );
    root->Branch( ( name+".RhoNoFastJet" ).c_str(),                              &RhoNoFastJet,                              ( name+"RhoNoFastJet/F" ).c_str() );
    root->Branch( ( name+".BeamSpotX" ).c_str(),                                 &BeamSpotX,                                 ( name+"BeamSpotX/F" ).c_str() );
    root->Branch( ( name+".BeamSpotY" ).c_str(),                                 &BeamSpotY,                                 ( name+"BeamSpotY/F" ).c_str() );
    root->Branch( ( name+".BeamSpotZ" ).c_str(),                                 &BeamSpotZ,                                 ( name+"BeamSpotZ/F" ).c_str() );
    root->Branch( ( name+".BSsigmaZ" ).c_str(),                                  &BSsigmaZ,                                  ( name+"BSsigmaZ/F" ).c_str() );
    root->Branch( ( name+".PrefiringWeight" ).c_str(),                           &PrefiringWeight,                           ( name+"PrefiringWeight/F" ).c_str() );
    root->Branch( ( name+".PrefiringWeightUp" ).c_str(),                         &PrefiringWeightUp,                         ( name+"PrefiringWeightUp/F" ).c_str() );
    root->Branch( ( name+".PrefiringWeightDown" ).c_str(),                       &PrefiringWeightDown,                       ( name+"PrefiringWeightDown/F" ).c_str() );
    root->Branch( ( name+".nBX" ).c_str(),                                       &nBX,                                       ( name+"nBX/I" ).c_str() );
    root->Branch( ( name+".nPU" ).c_str(),                                       nPU,                                        ( name+".nPU["+name+".nBX]/I" ).c_str() );
    root->Branch( ( name+".BXPU" ).c_str(),                                      BXPU,                                       ( name+".BXPU["+name+".nBX]/I" ).c_str() );
    root->Branch( ( name+".TrueIT" ).c_str(),                                    TrueIT,                                     ( name+".TrueIT["+name+".nBX]/F" ).c_str() );
    root->Branch( ( name+".PFMET" ).c_str(),                                     &PFMET,                                     ( name+"PFMET/F" ).c_str() );
    root->Branch( ( name+".PFMETPhi" ).c_str(),                                  &PFMETPhi,                                  ( name+"PFMETPhi/F" ).c_str() );
    root->Branch( ( name+".PFMETType1CorrPtShiftJetEnUp" ).c_str(),              &PFMETType1CorrPtShiftJetEnUp,              ( name+"PFMETType1CorrPtShiftJetEnUp/F" ).c_str() );
    root->Branch( ( name+".PFMETType1CorrPtShiftJetEnDown" ).c_str(),            &PFMETType1CorrPtShiftJetEnDown,            ( name+"PFMETType1CorrPtShiftJetEnDown/F" ).c_str() );
    root->Branch( ( name+".PFMETType1CorrPtShiftJetResUp" ).c_str(),             &PFMETType1CorrPtShiftJetResUp,             ( name+"PFMETType1CorrPtShiftJetResUp/F" ).c_str() );
    root->Branch( ( name+".PFMETType1CorrPtShiftJetResDown" ).c_str(),           &PFMETType1CorrPtShiftJetResDown,           ( name+"PFMETType1CorrPtShiftJetResDown/F" ).c_str() );
    root->Branch( ( name+".PFMETType1CorrPtShiftUnclusteredEnUp" ).c_str(),      &PFMETType1CorrPtShiftUnclusteredEnUp,      ( name+"PFMETType1CorrPtShiftUnclusteredEnUp/F" ).c_str() );
    root->Branch( ( name+".PFMETType1CorrPtShiftUnclusteredEnDown" ).c_str(),    &PFMETType1CorrPtShiftUnclusteredEnDown,    ( name+"PFMETType1CorrPtShiftUnclusteredEnDown/F" ).c_str() );
    root->Branch( ( name+".PFMETType1CorrPhiShiftJetEnUp" ).c_str(),             &PFMETType1CorrPhiShiftJetEnUp,             ( name+"PFMETType1CorrPhiShiftJetEnUp/F" ).c_str() );
    root->Branch( ( name+".PFMETType1CorrPhiShiftJetEnDown" ).c_str(),           &PFMETType1CorrPhiShiftJetEnDown,           ( name+"PFMETType1CorrPhiShiftJetEnDown/F" ).c_str() );
    root->Branch( ( name+".PFMETType1CorrPhiShiftJetResUp" ).c_str(),            &PFMETType1CorrPhiShiftJetResUp,            ( name+"PFMETType1CorrPhiShiftJetResUp/F" ).c_str() );
    root->Branch( ( name+".PFMETType1CorrPhiShiftJetResDown" ).c_str(),          &PFMETType1CorrPhiShiftJetResDown,          ( name+"PFMETType1CorrPhiShiftJetResDown/F" ).c_str() );
    root->Branch( ( name+".PFMETType1CorrPhiShiftUnclusteredEnUp" ).c_str(),     &PFMETType1CorrPhiShiftUnclusteredEnUp,     ( name+"PFMETType1CorrPhiShiftUnclusteredEnUp/F" ).c_str() );
    root->Branch( ( name+".PFMETType1CorrPhiShiftUnclusteredEnDown" ).c_str(),   &PFMETType1CorrPhiShiftUnclusteredEnDown,   ( name+"PFMETType1CorrPhiShiftUnclusteredEnDown/F" ).c_str() );
    root->Branch( ( name+".PFRawMET" ).c_str(),                                  &PFRawMET,                                  ( name+"PFRawMET/F" ).c_str() );
    root->Branch( ( name+".PFRawMETPhi" ).c_str(),                               &PFRawMETPhi,                               ( name+"PFRawMETPhi/F" ).c_str() );
    root->Branch( ( name+".PFSumEt" ).c_str(),                                   &PFSumEt,                                   ( name+"PFSumEt/F" ).c_str() );
    root->Branch( ( name+".PFMETSig" ).c_str(),                                  &PFMETSig,                                  ( name+"PFMETSig/F" ).c_str() );
    root->Branch( ( name+".PFMETlongitudinal" ).c_str(),                         &PFMETlongitudinal,                         ( name+"PFMETlongitudinal/F" ).c_str() );
    root->Branch( ( name+".PFMETRealSig" ).c_str(),                              &PFMETRealSig,                              ( name+"PFMETRealSig/F" ).c_str() );
    root->Branch( ( name+".PFGenMET" ).c_str(),                                  &PFGenMET,                                  ( name+"PFGenMET/F" ).c_str() );
    root->Branch( ( name+".PFGenMETPhi" ).c_str(),                               &PFGenMETPhi,                               ( name+"PFGenMETPhi/F" ).c_str() );
    root->Branch( ( name+".PFMETx" ).c_str(),                                    &PFMETx,                                    ( name+"PFMETx/F" ).c_str() );
    root->Branch( ( name+".PFMETy" ).c_str(),                                    &PFMETy,                                    ( name+"PFMETy/F" ).c_str() );
    root->Branch( ( name+".PuppiMET" ).c_str(),                                  &PuppiMET,                                  ( name+"PuppiMET/F" ).c_str() );
    root->Branch( ( name+".PuppiMETPhi" ).c_str(),                               &PuppiMETPhi,                               ( name+"PuppiMETPhi/F" ).c_str() );
    root->Branch( ( name+".PuppiMETType1CorrPtShiftJetEnUp" ).c_str(),           &PuppiMETType1CorrPtShiftJetEnUp,           ( name+"PuppiMETType1CorrPtShiftJetEnUp/F" ).c_str() );
    root->Branch( ( name+".PuppiMETType1CorrPtShiftJetEnDown" ).c_str(),         &PuppiMETType1CorrPtShiftJetEnDown,         ( name+"PuppiMETType1CorrPtShiftJetEnDown/F" ).c_str() );
    root->Branch( ( name+".PuppiMETType1CorrPtShiftJetResUp" ).c_str(),          &PuppiMETType1CorrPtShiftJetResUp,          ( name+"PuppiMETType1CorrPtShiftJetResUp/F" ).c_str() );
    root->Branch( ( name+".PuppiMETType1CorrPtShiftJetResDown" ).c_str(),        &PuppiMETType1CorrPtShiftJetResDown,        ( name+"PuppiMETType1CorrPtShiftJetResDown/F" ).c_str() );
    root->Branch( ( name+".PuppiMETType1CorrPtShiftUnclusteredEnUp" ).c_str(),   &PuppiMETType1CorrPtShiftUnclusteredEnUp,   ( name+"PuppiMETType1CorrPtShiftUnclusteredEnUp/F" ).c_str() );
    root->Branch( ( name+".PuppiMETType1CorrPtShiftUnclusteredEnDown" ).c_str(), &PuppiMETType1CorrPtShiftUnclusteredEnDown, ( name+"PuppiMETType1CorrPtShiftUnclusteredEnDown/F" ).c_str() );
    root->Branch( ( name+".PuppiMETType1CorrPhiShiftJetEnUp" ).c_str(),          &PuppiMETType1CorrPhiShiftJetEnUp,          ( name+"PuppiMETType1CorrPhiShiftJetEnUp/F" ).c_str() );
    root->Branch( ( name+".PuppiMETType1CorrPhiShiftJetEnDown" ).c_str(),        &PuppiMETType1CorrPhiShiftJetEnDown,        ( name+"PuppiMETType1CorrPhiShiftJetEnDown/F" ).c_str() );
    root->Branch( ( name+".PuppiMETType1CorrPhiShiftJetResUp" ).c_str(),         &PuppiMETType1CorrPhiShiftJetResUp,         ( name+"PuppiMETType1CorrPhiShiftJetResUp/F" ).c_str() );
    root->Branch( ( name+".PuppiMETType1CorrPhiShiftJetResDown" ).c_str(),       &PuppiMETType1CorrPhiShiftJetResDown,       ( name+"PuppiMETType1CorrPhiShiftJetResDown/F" ).c_str() );
    root->Branch( ( name+".PuppiMETType1CorrPhiShiftUnclusteredEnUp" ).c_str(),  &PuppiMETType1CorrPhiShiftUnclusteredEnUp,  ( name+"PuppiMETType1CorrPhiShiftUnclusteredEnUp/F" ).c_str() );
    root->Branch( ( name+".PuppiMETType1CorrPhiShiftUnclusteredEnDown" ).c_str(),&PuppiMETType1CorrPhiShiftUnclusteredEnDown,( name+"PuppiMETType1CorrPhiShiftUnclusteredEnDown/F" ).c_str() );
    root->Branch( ( name+".PuppiRawMET" ).c_str(),                               &PuppiRawMET,                               ( name+"PuppiRawMET/F" ).c_str() );
    root->Branch( ( name+".PuppiRawMETPhi" ).c_str(),                            &PuppiRawMETPhi,                            ( name+"PuppiRawMETPhi/F" ).c_str() );
    root->Branch( ( name+".PuppiSumEt" ).c_str(),                                &PuppiSumEt,                                ( name+"PuppiSumEt/F" ).c_str() );
    root->Branch( ( name+".PuppiMETSig" ).c_str(),                               &PuppiMETSig,                               ( name+"PuppiMETSig/F" ).c_str() );
    root->Branch( ( name+".PuppiMETlongitudinal" ).c_str(),                      &PuppiMETlongitudinal,                      ( name+"PuppiMETlongitudinal/F" ).c_str() );
    root->Branch( ( name+".PuppiMETRealSig" ).c_str(),                           &PuppiMETRealSig,                           ( name+"PuppiMETRealSig/F" ).c_str() );
    root->Branch( ( name+".PuppiGenMET" ).c_str(),                               &PuppiGenMET,                               ( name+"PuppiGenMET/F" ).c_str() );
    root->Branch( ( name+".PuppiGenMETPhi" ).c_str(),                            &PuppiGenMETPhi,                            ( name+"PuppiGenMETPhi/F" ).c_str() );
    root->Branch( ( name+".PuppiMETx" ).c_str(),                                 &PuppiMETx,                                 ( name+"PuppiMETx/F" ).c_str() );
    root->Branch( ( name+".PuppiMETy" ).c_str(),                                 &PuppiMETy,                                 ( name+"PuppiMETy/F" ).c_str() );
  } 
    
  void
  Register( TTree* root, const std::string& name = "EvtInfo" )
  { 
    root->SetBranchAddress( ( name+".RunNo" ).c_str(),                                     &RunNo );
    root->SetBranchAddress( ( name+".EvtNo" ).c_str(),                                     &EvtNo );
    root->SetBranchAddress( ( name+".BxNo" ).c_str(),                                      &BxNo );
    root->SetBranchAddress( ( name+".LumiNo" ).c_str(),                                    &LumiNo );
    root->SetBranchAddress( ( name+".Orbit" ).c_str(),                                     &Orbit );
    root->SetBranchAddress( ( name+".McFlag" ).c_str(),                                    &McFlag );
    root->SetBranchAddress( ( name+".EventTime" ).c_str(),                                 &EventTime );
    root->SetBranchAddress( ( name+".Flag_METFilter" ).c_str(),                            &Flag_METFilter );
    root->SetBranchAddress( ( name+".Rho" ).c_str(),                                       &Rho );
    root->SetBranchAddress( ( name+".RhoNoFastJet" ).c_str(),                              &RhoNoFastJet );
    root->SetBranchAddress( ( name+".BeamSpotX" ).c_str(),                                 &BeamSpotX );
    root->SetBranchAddress( ( name+".BeamSpotY" ).c_str(),                                 &BeamSpotY );
    root->SetBranchAddress( ( name+".BeamSpotZ" ).c_str(),                                 &BeamSpotZ );
    root->SetBranchAddress( ( name+".BSsigmaZ" ).c_str(),                                  &BSsigmaZ );
    root->SetBranchAddress( ( name+".PrefiringWeight" ).c_str(),                           &PrefiringWeight );
    root->SetBranchAddress( ( name+".PrefiringWeightUp" ).c_str(),                         &PrefiringWeightUp );
    root->SetBranchAddress( ( name+".PrefiringWeightDown" ).c_str(),                       &PrefiringWeightDown );
    root->SetBranchAddress( ( name+".nBX" ).c_str(),                                       &nBX );
    root->SetBranchAddress( ( name+".nPU" ).c_str(),                                       nPU );
    root->SetBranchAddress( ( name+".BXPU" ).c_str(),                                      BXPU );
    root->SetBranchAddress( ( name+".TrueIT" ).c_str(),                                    TrueIT );
    root->SetBranchAddress( ( name+".PFMET" ).c_str(),                                     &PFMET );
    root->SetBranchAddress( ( name+".PFMETPhi" ).c_str(),                                  &PFMETPhi );
    root->SetBranchAddress( ( name+".PFMETType1CorrPtShiftJetEnUp" ).c_str(),              &PFMETType1CorrPtShiftJetEnUp );
    root->SetBranchAddress( ( name+".PFMETType1CorrPtShiftJetEnDown" ).c_str(),            &PFMETType1CorrPtShiftJetEnDown );
    root->SetBranchAddress( ( name+".PFMETType1CorrPtShiftJetResUp" ).c_str(),             &PFMETType1CorrPtShiftJetResUp );
    root->SetBranchAddress( ( name+".PFMETType1CorrPtShiftJetResDown" ).c_str(),           &PFMETType1CorrPtShiftJetResDown );
    root->SetBranchAddress( ( name+".PFMETType1CorrPtShiftUnclusteredEnUp" ).c_str(),      &PFMETType1CorrPtShiftUnclusteredEnUp );
    root->SetBranchAddress( ( name+".PFMETType1CorrPtShiftUnclusteredEnDown" ).c_str(),    &PFMETType1CorrPtShiftUnclusteredEnDown );
    root->SetBranchAddress( ( name+".PFMETType1CorrPhiShiftJetEnUp" ).c_str(),             &PFMETType1CorrPhiShiftJetEnUp );
    root->SetBranchAddress( ( name+".PFMETType1CorrPhiShiftJetEnDown" ).c_str(),           &PFMETType1CorrPhiShiftJetEnDown );
    root->SetBranchAddress( ( name+".PFMETType1CorrPhiShiftJetResUp" ).c_str(),            &PFMETType1CorrPhiShiftJetResUp );
    root->SetBranchAddress( ( name+".PFMETType1CorrPhiShiftJetResDown" ).c_str(),          &PFMETType1CorrPhiShiftJetResDown );
    root->SetBranchAddress( ( name+".PFMETType1CorrPhiShiftUnclusteredEnUp" ).c_str(),     &PFMETType1CorrPhiShiftUnclusteredEnUp );
    root->SetBranchAddress( ( name+".PFMETType1CorrPhiShiftUnclusteredEnDown" ).c_str(),   &PFMETType1CorrPhiShiftUnclusteredEnDown );
    root->SetBranchAddress( ( name+".PFRawMET" ).c_str(),                                  &PFRawMET );
    root->SetBranchAddress( ( name+".PFRawMETPhi" ).c_str(),                               &PFRawMETPhi );
    root->SetBranchAddress( ( name+".PFSumEt" ).c_str(),                                   &PFSumEt );
    root->SetBranchAddress( ( name+".PFMETSig" ).c_str(),                                  &PFMETSig );
    root->SetBranchAddress( ( name+".PFMETlongitudinal" ).c_str(),                         &PFMETlongitudinal );
    root->SetBranchAddress( ( name+".PFMETRealSig" ).c_str(),                              &PFMETRealSig );
    root->SetBranchAddress( ( name+".PFGenMET" ).c_str(),                                  &PFGenMET );
    root->SetBranchAddress( ( name+".PFGenMETPhi" ).c_str(),                               &PFGenMETPhi );
    root->SetBranchAddress( ( name+".PFMETx" ).c_str(),                                    &PFMETx );
    root->SetBranchAddress( ( name+".PFMETy" ).c_str(),                                    &PFMETy );
    root->SetBranchAddress( ( name+".PuppiMET" ).c_str(),                                  &PuppiMET );
    root->SetBranchAddress( ( name+".PuppiMETPhi" ).c_str(),                               &PuppiMETPhi );
    root->SetBranchAddress( ( name+".PuppiMETType1CorrPtShiftJetEnUp" ).c_str(),           &PuppiMETType1CorrPtShiftJetEnUp );
    root->SetBranchAddress( ( name+".PuppiMETType1CorrPtShiftJetEnDown" ).c_str(),         &PuppiMETType1CorrPtShiftJetEnDown );
    root->SetBranchAddress( ( name+".PuppiMETType1CorrPtShiftJetResUp" ).c_str(),          &PuppiMETType1CorrPtShiftJetResUp );
    root->SetBranchAddress( ( name+".PuppiMETType1CorrPtShiftJetResDown" ).c_str(),        &PuppiMETType1CorrPtShiftJetResDown );
    root->SetBranchAddress( ( name+".PuppiMETType1CorrPtShiftUnclusteredEnUp" ).c_str(),   &PuppiMETType1CorrPtShiftUnclusteredEnUp );
    root->SetBranchAddress( ( name+".PuppiMETType1CorrPtShiftUnclusteredEnDown" ).c_str(), &PuppiMETType1CorrPtShiftUnclusteredEnDown );
    root->SetBranchAddress( ( name+".PuppiMETType1CorrPhiShiftJetEnUp" ).c_str(),          &PuppiMETType1CorrPhiShiftJetEnUp );
    root->SetBranchAddress( ( name+".PuppiMETType1CorrPhiShiftJetEnDown" ).c_str(),        &PuppiMETType1CorrPhiShiftJetEnDown );
    root->SetBranchAddress( ( name+".PuppiMETType1CorrPhiShiftJetResUp" ).c_str(),         &PuppiMETType1CorrPhiShiftJetResUp );
    root->SetBranchAddress( ( name+".PuppiMETType1CorrPhiShiftJetResDown" ).c_str(),       &PuppiMETType1CorrPhiShiftJetResDown );
    root->SetBranchAddress( ( name+".PuppiMETType1CorrPhiShiftUnclusteredEnUp" ).c_str(),  &PuppiMETType1CorrPhiShiftUnclusteredEnUp );
    root->SetBranchAddress( ( name+".PuppiMETType1CorrPhiShiftUnclusteredEnDown" ).c_str(),&PuppiMETType1CorrPhiShiftUnclusteredEnDown );
    root->SetBranchAddress( ( name+".PuppiRawMET" ).c_str(),                               &PuppiRawMET );
    root->SetBranchAddress( ( name+".PuppiRawMETPhi" ).c_str(),                            &PuppiRawMETPhi );
    root->SetBranchAddress( ( name+".PuppiSumEt" ).c_str(),                                &PuppiSumEt );
    root->SetBranchAddress( ( name+".PuppiMETSig" ).c_str(),                               &PuppiMETSig );
    root->SetBranchAddress( ( name+".PuppiMETlongitudinal" ).c_str(),                      &PuppiMETlongitudinal );
    root->SetBranchAddress( ( name+".PuppiMETRealSig" ).c_str(),                           &PuppiMETRealSig );
    root->SetBranchAddress( ( name+".PuppiGenMET" ).c_str(),                               &PuppiGenMET );
    root->SetBranchAddress( ( name+".PuppiGenMETPhi" ).c_str(),                            &PuppiGenMETPhi );
    root->SetBranchAddress( ( name+".PuppiMETx" ).c_str(),                                 &PuppiMETx );
    root->SetBranchAddress( ( name+".PuppiMETy" ).c_str(),                                 &PuppiMETy );
  }
};

class GenInfoBranches
{
public:
  Int_t Size;
  Float_t Pt [MAX_GENS];
  Float_t Eta [MAX_GENS];
  Float_t Phi [MAX_GENS];
  Float_t Mass [MAX_GENS];
  Int_t PdgID [MAX_GENS];
  Int_t PhotonFlag [MAX_GENS];
  Int_t Status [MAX_GENS];
  Int_t nMo [MAX_GENS];
  Int_t nDa [MAX_GENS];
  Int_t Mo1 [MAX_GENS];
  Int_t Mo2 [MAX_GENS];
  Int_t Da1 [MAX_GENS];
  Int_t Da2 [MAX_GENS];
  Int_t Mo1PdgID [MAX_GENS];
  Int_t Mo2PdgID [MAX_GENS];
  Int_t Mo1Status [MAX_GENS];
  Int_t Mo2Status [MAX_GENS];
  Int_t Da1PdgID [MAX_GENS];
  Int_t Da2PdgID [MAX_GENS];
  Int_t GrandMo1PdgID [MAX_GENS];
  Int_t GrandMo2PdgID [MAX_GENS];
  Int_t GrandMo1Status [MAX_GENS];
  Int_t GrandMo2Status [MAX_GENS];
  Bool_t McIsTZTZ;
  Bool_t McIsTHTH;
  Bool_t McIsTZTH;
  Bool_t McIsTZBW;
  Bool_t McIsTHBW;
  Bool_t McIsBWBW;
  Float_t Weight;
  Float_t ptHat;
  Int_t PDFid1;
  Int_t PDFid2;
  Float_t PDFx1;
  Float_t PDFx2;
  Float_t PDFscale;
  Float_t PDFv1;
  Float_t PDFv2;
  Float_t LHENominalWeight;
  Float_t LHEOriginalWeight;
  Int_t LHESize;
  Int_t LHESystematicId [MAX_LHE];
  Float_t LHESystematicWeights [MAX_LHE];

  void
  RegisterTree( TTree* root, const std::string& name = "GenInfo" )
  {
    root->Branch( ( name+".Size" ).c_str(),                 &Size,                ( name+"Size/I" ).c_str() );
    root->Branch( ( name+".Pt" ).c_str(),                   Pt,                   ( name+".Pt["+name+".Size]/F" ).c_str() );
    root->Branch( ( name+".Eta" ).c_str(),                  Eta,                  ( name+".Eta["+name+".Size]/F" ).c_str() );
    root->Branch( ( name+".Phi" ).c_str(),                  Phi,                  ( name+".Phi["+name+".Size]/F" ).c_str() );
    root->Branch( ( name+".Mass" ).c_str(),                 Mass,                 ( name+".Mass["+name+".Size]/F" ).c_str() );
    root->Branch( ( name+".PdgID" ).c_str(),                PdgID,                ( name+".PdgID["+name+".Size]/I" ).c_str() );
    root->Branch( ( name+".PhotonFlag" ).c_str(),           PhotonFlag,           ( name+".PhotonFlag["+name+".Size]/I" ).c_str() );
    root->Branch( ( name+".Status" ).c_str(),               Status,               ( name+".Status["+name+".Size]/I" ).c_str() );
    root->Branch( ( name+".nMo" ).c_str(),                  nMo,                  ( name+".nMo["+name+".Size]/I" ).c_str() );
    root->Branch( ( name+".nDa" ).c_str(),                  nDa,                  ( name+".nDa["+name+".Size]/I" ).c_str() );
    root->Branch( ( name+".Mo1" ).c_str(),                  Mo1,                  ( name+".Mo1["+name+".Size]/I" ).c_str() );
    root->Branch( ( name+".Mo2" ).c_str(),                  Mo2,                  ( name+".Mo2["+name+".Size]/I" ).c_str() );
    root->Branch( ( name+".Da1" ).c_str(),                  Da1,                  ( name+".Da1["+name+".Size]/I" ).c_str() );
    root->Branch( ( name+".Da2" ).c_str(),                  Da2,                  ( name+".Da2["+name+".Size]/I" ).c_str() );
    root->Branch( ( name+".Mo1PdgID" ).c_str(),             Mo1PdgID,             ( name+".Mo1PdgID["+name+".Size]/I" ).c_str() );
    root->Branch( ( name+".Mo2PdgID" ).c_str(),             Mo2PdgID,             ( name+".Mo2PdgID["+name+".Size]/I" ).c_str() );
    root->Branch( ( name+".Mo1Status" ).c_str(),            Mo1Status,            ( name+".Mo1Status["+name+".Size]/I" ).c_str() );
    root->Branch( ( name+".Mo2Status" ).c_str(),            Mo2Status,            ( name+".Mo2Status["+name+".Size]/I" ).c_str() );
    root->Branch( ( name+".Da1PdgID" ).c_str(),             Da1PdgID,             ( name+".Da1PdgID["+name+".Size]/I" ).c_str() );
    root->Branch( ( name+".Da2PdgID" ).c_str(),             Da2PdgID,             ( name+".Da2PdgID["+name+".Size]/I" ).c_str() );
    root->Branch( ( name+".GrandMo1PdgID" ).c_str(),        GrandMo1PdgID,        ( name+".GrandMo1PdgID["+name+".Size]/I" ).c_str() );
    root->Branch( ( name+".GrandMo2PdgID" ).c_str(),        GrandMo2PdgID,        ( name+".GrandMo2PdgID["+name+".Size]/I" ).c_str() );
    root->Branch( ( name+".GrandMo1Status" ).c_str(),       GrandMo1Status,       ( name+".GrandMo1Status["+name+".Size]/I" ).c_str() );
    root->Branch( ( name+".GrandMo2Status" ).c_str(),       GrandMo2Status,       ( name+".GrandMo2Status["+name+".Size]/I" ).c_str() );
    root->Branch( ( name+".McIsTZTZ" ).c_str(),             &McIsTZTZ,            ( name+"McIsTZTZ/O" ).c_str() );
    root->Branch( ( name+".McIsTHTH" ).c_str(),             &McIsTHTH,            ( name+"McIsTHTH/O" ).c_str() );
    root->Branch( ( name+".McIsTZTH" ).c_str(),             &McIsTZTH,            ( name+"McIsTZTH/O" ).c_str() );
    root->Branch( ( name+".McIsTZBW" ).c_str(),             &McIsTZBW,            ( name+"McIsTZBW/O" ).c_str() );
    root->Branch( ( name+".McIsTHBW" ).c_str(),             &McIsTHBW,            ( name+"McIsTHBW/O" ).c_str() );
    root->Branch( ( name+".McIsBWBW" ).c_str(),             &McIsBWBW,            ( name+"McIsBWBW/O" ).c_str() );
    root->Branch( ( name+".Weight" ).c_str(),               &Weight,              ( name+"Weight/F" ).c_str() );
    root->Branch( ( name+".ptHat" ).c_str(),                &ptHat,               ( name+"ptHat/F" ).c_str() );
    root->Branch( ( name+".PDFid1" ).c_str(),               &PDFid1,              ( name+"PDFid1/I" ).c_str() );
    root->Branch( ( name+".PDFid2" ).c_str(),               &PDFid2,              ( name+"PDFid2/I" ).c_str() );
    root->Branch( ( name+".PDFx1" ).c_str(),                &PDFx1,               ( name+"PDFx1/F" ).c_str() );
    root->Branch( ( name+".PDFx2" ).c_str(),                &PDFx2,               ( name+"PDFx2/F" ).c_str() );
    root->Branch( ( name+".PDFscale" ).c_str(),             &PDFscale,            ( name+"PDFscale/F" ).c_str() );
    root->Branch( ( name+".PDFv1" ).c_str(),                &PDFv1,               ( name+"PDFv1/F" ).c_str() );
    root->Branch( ( name+".PDFv2" ).c_str(),                &PDFv2,               ( name+"PDFv2/F" ).c_str() );
    root->Branch( ( name+".LHENominalWeight" ).c_str(),     &LHENominalWeight,    ( name+"LHENominalWeight/F" ).c_str() );
    root->Branch( ( name+".LHEOriginalWeight" ).c_str(),    &LHEOriginalWeight,   ( name+"LHEOriginalWeight/F" ).c_str() );
    root->Branch( ( name+".LHESize" ).c_str(),              &LHESize,             ( name+"LHESize/I" ).c_str() );
    root->Branch( ( name+".LHESystematicId" ).c_str(),      LHESystematicId,      ( name+".LHESystematicId["+name+".LHESize]/I" ).c_str() );
    root->Branch( ( name+".LHESystematicWeights" ).c_str(), LHESystematicWeights, ( name+".LHESystematicWeights["+name+".LHESize]/F" ).c_str() );
  }

  void
  Register( TTree* root, const std::string& name = "GenInfo" )
  {
    root->SetBranchAddress( ( name+".Size" ).c_str(),                 &Size );
    root->SetBranchAddress( ( name+".Pt" ).c_str(),                   Pt );
    root->SetBranchAddress( ( name+".Eta" ).c_str(),                  Eta );
    root->SetBranchAddress( ( name+".Phi" ).c_str(),                  Phi );
    root->SetBranchAddress( ( name+".Mass" ).c_str(),                 Mass );
    root->SetBranchAddress( ( name+".PdgID" ).c_str(),                PdgID );
    root->SetBranchAddress( ( name+".PhotonFlag" ).c_str(),           PhotonFlag );
    root->SetBranchAddress( ( name+".Status" ).c_str(),               Status );
    root->SetBranchAddress( ( name+".nMo" ).c_str(),                  nMo );
    root->SetBranchAddress( ( name+".nDa" ).c_str(),                  nDa );
    root->SetBranchAddress( ( name+".Mo1" ).c_str(),                  Mo1 );
    root->SetBranchAddress( ( name+".Mo2" ).c_str(),                  Mo2 );
    root->SetBranchAddress( ( name+".Da1" ).c_str(),                  Da1 );
    root->SetBranchAddress( ( name+".Da2" ).c_str(),                  Da2 );
    root->SetBranchAddress( ( name+".Mo1PdgID" ).c_str(),             Mo1PdgID );
    root->SetBranchAddress( ( name+".Mo2PdgID" ).c_str(),             Mo2PdgID );
    root->SetBranchAddress( ( name+".Mo1Status" ).c_str(),            Mo1Status );
    root->SetBranchAddress( ( name+".Mo2Status" ).c_str(),            Mo2Status );
    root->SetBranchAddress( ( name+".Da1PdgID" ).c_str(),             Da1PdgID );
    root->SetBranchAddress( ( name+".Da2PdgID" ).c_str(),             Da2PdgID );
    root->SetBranchAddress( ( name+".GrandMo1PdgID" ).c_str(),        GrandMo1PdgID );
    root->SetBranchAddress( ( name+".GrandMo2PdgID" ).c_str(),        GrandMo2PdgID );
    root->SetBranchAddress( ( name+".GrandMo1Status" ).c_str(),       GrandMo1Status );
    root->SetBranchAddress( ( name+".GrandMo2Status" ).c_str(),       GrandMo2Status );
    root->SetBranchAddress( ( name+".McIsTZTZ" ).c_str(),             &McIsTZTZ );
    root->SetBranchAddress( ( name+".McIsTHTH" ).c_str(),             &McIsTHTH );
    root->SetBranchAddress( ( name+".McIsTZTH" ).c_str(),             &McIsTZTH );
    root->SetBranchAddress( ( name+".McIsTZBW" ).c_str(),             &McIsTZBW );
    root->SetBranchAddress( ( name+".McIsTHBW" ).c_str(),             &McIsTHBW );
    root->SetBranchAddress( ( name+".McIsBWBW" ).c_str(),             &McIsBWBW );
    root->SetBranchAddress( ( name+".Weight" ).c_str(),               &Weight );
    root->SetBranchAddress( ( name+".ptHat" ).c_str(),                &ptHat );
    root->SetBranchAddress( ( name+".PDFid1" ).c_str(),               &PDFid1 );
    root->SetBranchAddress( ( name+".PDFid2" ).c_str(),               &PDFid2 );
    root->SetBranchAddress( ( name+".PDFx1" ).c_str(),                &PDFx1 );
    root->SetBranchAddress( ( name+".PDFx2" ).c_str(),                &PDFx2 );
    root->SetBranchAddress( ( name+".PDFscale" ).c_str(),             &PDFscale );
    root->SetBranchAddress( ( name+".PDFv1" ).c_str(),                &PDFv1 );
    root->SetBranchAddress( ( name+".PDFv2" ).c_str(),                &PDFv2 );
    root->SetBranchAddress( ( name+".LHENominalWeight" ).c_str(),     &LHENominalWeight );
    root->SetBranchAddress( ( name+".LHEOriginalWeight" ).c_str(),    &LHEOriginalWeight );
    root->SetBranchAddress( ( name+".LHESize" ).c_str(),              &LHESize );
    root->SetBranchAddress( ( name+".LHESystematicId" ).c_str(),      LHESystematicId );
    root->SetBranchAddress( ( name+".LHESystematicWeights" ).c_str(), LHESystematicWeights );
  }
};

class JetInfoBranches
{
public:
  Int_t Size;
  Int_t Index [MAX_JETS];
  Int_t NTracks [MAX_JETS];
  Float_t Et [MAX_JETS];
  Float_t Pt [MAX_JETS];
  Float_t Eta [MAX_JETS];
  Float_t Phi [MAX_JETS];
  Float_t Px [MAX_JETS];
  Float_t Py [MAX_JETS];
  Float_t Pz [MAX_JETS];
  Float_t Energy [MAX_JETS];
  Float_t Mass [MAX_JETS];
  Float_t Area [MAX_JETS];
  Float_t JetCharge [MAX_JETS];
  Int_t NConstituents [MAX_JETS];
  Float_t Pt_MuonCleaned [MAX_JETS];
  Float_t Eta_MuonCleaned [MAX_JETS];
  Float_t Phi_MuonCleaned [MAX_JETS];
  Float_t Energy_MuonCleaned [MAX_JETS];
  Float_t Unc [MAX_JETS];
  Float_t JesUnc [MAX_JETS];
  Float_t JERPt [MAX_JETS];
  Float_t JERPhi [MAX_JETS];
  Float_t JERScale [MAX_JETS];
  Float_t JERScaleUp [MAX_JETS];
  Float_t JERScaleDown [MAX_JETS];
  Float_t QGTagsLikelihood [MAX_JETS];
  Float_t PUJetIDfullDiscriminant [MAX_JETS];
  Int_t PUJetIDcutbased [MAX_JETS];
  Int_t NCH [MAX_JETS];
  Int_t NNH [MAX_JETS];
  Int_t NNHw [MAX_JETS];
  Int_t JM [MAX_JETS];
  Int_t JMw [MAX_JETS];
  Float_t CEF [MAX_JETS];
  Float_t CHF [MAX_JETS];
  Float_t NEF [MAX_JETS];
  Float_t NHF [MAX_JETS];
  Float_t MUF [MAX_JETS];
  Float_t PtCorrRaw [MAX_JETS];
  Float_t PtCorrL2 [MAX_JETS];
  Float_t PtCorrL3 [MAX_JETS];
  Float_t pfDeepCSVJetTags_probb [MAX_JETS];
  Float_t pfDeepCSVJetTags_probbb [MAX_JETS];
  Float_t pfDeepCSVJetTags_probc [MAX_JETS];
  Float_t pfDeepCSVJetTags_probudsg [MAX_JETS];
  Float_t pfDeepFlavourJetTags_probb   [MAX_JETS];
  Float_t pfDeepFlavourJetTags_probbb  [MAX_JETS];
  Float_t pfDeepFlavourJetTags_problepb[MAX_JETS];
  Float_t pfDeepFlavourJetTags_probc   [MAX_JETS];
  Float_t pfDeepFlavourJetTags_probuds [MAX_JETS];
  Float_t pfDeepFlavourJetTags_probg   [MAX_JETS];
  Float_t pfBoostedDoubleSecondaryVertexAK8BJetTags [MAX_JETS];
  Float_t pfMassIndependentDeepDoubleBvLJetTags_probHbb [MAX_JETS];
  Float_t GenJetPt [MAX_JETS];
  Float_t GenJetEta [MAX_JETS];
  Float_t GenJetPhi [MAX_JETS];
  Float_t GenPt [MAX_JETS];
  Float_t GenEta [MAX_JETS];
  Float_t GenPhi [MAX_JETS];
  Int_t GenPdgID [MAX_JETS];
  Int_t GenFlavor [MAX_JETS];
  Int_t GenHadronFlavor [MAX_JETS];
  Int_t GenMCTag [MAX_JETS];
  Int_t NSubjets [MAX_JETS];
  Int_t SubjetsIdxStart [MAX_JETS];
  Float_t NjettinessAK8tau1 [MAX_JETS];
  Float_t NjettinessAK8tau2 [MAX_JETS];
  Float_t NjettinessAK8tau3 [MAX_JETS];
  Float_t PuppiSoftDrop_ECFb1N2 [MAX_JETS];
  Float_t PuppiSoftDrop_ECFb1N3 [MAX_JETS];
  Float_t ak8PFJetsCHSSoftDropMass [MAX_JETS];
  Float_t ak8PFJetsCHSPrunedMass [MAX_JETS];
  Float_t ak8PFJetsCHSTrimmedMass [MAX_JETS];
  Float_t ak8PFJetsCHSFilteredMass [MAX_JETS];
  Float_t topJetMass [MAX_JETS];
  Float_t ca8TopMass [MAX_JETS];
  Float_t ca8MinMass [MAX_JETS];
  std::vector<Float_t>* SubjetMass;
  std::vector<Float_t>* SubjetPt;
  std::vector<Float_t>* SubjetEt;
  std::vector<Float_t>* SubjetEta;
  std::vector<Float_t>* SubjetPhi;
  std::vector<Float_t>* SubjetArea;
  std::vector<Float_t>* SubjetPtUncorr;
  std::vector<Float_t>* SubjetCombinedSVBJetTags;
  std::vector<Float_t>* SubjetDeepCSVJetTags_probb;
  std::vector<Float_t>* SubjetDeepCSVJetTags_probbb;
  std::vector<Float_t>* SubjetDeepCSVJetTags_probc;
  std::vector<Float_t>* SubjetDeepCSVJetTags_probudsg;
  std::vector<Float_t>* SubjetsummaryDeepCSVJetTags_BvsAll;
  std::vector<Float_t>* SubjetsummaryDeepCSVJetTags_CvsB;
  std::vector<Float_t>* SubjetsummaryDeepCSVJetTags_CvsL;
  std::vector<Float_t>* PuppiSoftDrop_SubjetECFb1N2;
  std::vector<Float_t>* PuppiSoftDrop_SubjetECFb1N3;
  std::vector<Float_t>* SubjetGenPdgId;
  std::vector<Float_t>* SubjetGenFlavour;
  std::vector<Float_t>* SubjetHadronFlavour;
  std::vector<Float_t> SubjetMass_w;
  std::vector<Float_t> SubjetPt_w;
  std::vector<Float_t> SubjetEt_w;
  std::vector<Float_t> SubjetEta_w;
  std::vector<Float_t> SubjetPhi_w;
  std::vector<Float_t> SubjetArea_w;
  std::vector<Float_t> SubjetPtUncorr_w;
  std::vector<Float_t> SubjetDeepCSVJetTags_probb_w;
  std::vector<Float_t> SubjetDeepCSVJetTags_probbb_w;
  std::vector<Float_t> PuppiSoftDrop_SubjetECFb1N2_w;
  std::vector<Float_t> PuppiSoftDrop_SubjetECFb1N3_w;
  std::vector<Float_t> SubjetGenPdgId_w;
  std::vector<Float_t> SubjetGenFlavour_w;
  std::vector<Float_t> SubjetHadronFlavour_w;
  Float_t TempPt1 [MAX_JETS];
  Float_t TempEta1 [MAX_JETS];
  Float_t TempPhi1 [MAX_JETS];
  Float_t TempEnergy1 [MAX_JETS];
  Float_t TempPt2 [MAX_JETS];
  Float_t TempEta2 [MAX_JETS];
  Float_t TempPhi2 [MAX_JETS];
  Float_t TempEnergy2 [MAX_JETS];
  Float_t TempFloat1 [MAX_JETS];
  Float_t TempFloat2 [MAX_JETS];
  Float_t TempFloat3 [MAX_JETS];
  Float_t TempFloat4 [MAX_JETS];

  void
  RegisterTree( TTree* root, const std::string& name = "JetInfo" )
  {
    root->Branch( ( name+".Size" ).c_str(),                                         &Size,                                        ( name+"Size/I" ).c_str() );
    root->Branch( ( name+".Index" ).c_str(),                                        Index,                                        ( name+".Index["+name+".Size]/I" ).c_str() );
    root->Branch( ( name+".NTracks" ).c_str(),                                      NTracks,                                      ( name+".NTracks["+name+".Size]/I" ).c_str() );
    root->Branch( ( name+".Et" ).c_str(),                                           Et,                                           ( name+".Et["+name+".Size]/F" ).c_str() );
    root->Branch( ( name+".Pt" ).c_str(),                                           Pt,                                           ( name+".Pt["+name+".Size]/F" ).c_str() );
    root->Branch( ( name+".Eta" ).c_str(),                                          Eta,                                          ( name+".Eta["+name+".Size]/F" ).c_str() );
    root->Branch( ( name+".Phi" ).c_str(),                                          Phi,                                          ( name+".Phi["+name+".Size]/F" ).c_str() );
    root->Branch( ( name+".Px" ).c_str(),                                           Px,                                           ( name+".Px["+name+".Size]/F" ).c_str() );
    root->Branch( ( name+".Py" ).c_str(),                                           Py,                                           ( name+".Py["+name+".Size]/F" ).c_str() );
    root->Branch( ( name+".Pz" ).c_str(),                                           Pz,                                           ( name+".Pz["+name+".Size]/F" ).c_str() );
    root->Branch( ( name+".Energy" ).c_str(),                                       Energy,                                       ( name+".Energy["+name+".Size]/F" ).c_str() );
    root->Branch( ( name+".Mass" ).c_str(),                                         Mass,                                         ( name+".Mass["+name+".Size]/F" ).c_str() );
    root->Branch( ( name+".Area" ).c_str(),                                         Area,                                         ( name+".Area["+name+".Size]/F" ).c_str() );
    root->Branch( ( name+".JetCharge" ).c_str(),                                    JetCharge,                                    ( name+".JetCharge["+name+".Size]/F" ).c_str() );
    root->Branch( ( name+".NConstituents" ).c_str(),                                NConstituents,                                ( name+".NConstituents["+name+".Size]/I" ).c_str() );
    root->Branch( ( name+".Pt_MuonCleaned" ).c_str(),                               Pt_MuonCleaned,                               ( name+".Pt_MuonCleaned["+name+".Size]/F" ).c_str() );
    root->Branch( ( name+".Eta_MuonCleaned" ).c_str(),                              Eta_MuonCleaned,                              ( name+".Eta_MuonCleaned["+name+".Size]/F" ).c_str() );
    root->Branch( ( name+".Phi_MuonCleaned" ).c_str(),                              Phi_MuonCleaned,                              ( name+".Phi_MuonCleaned["+name+".Size]/F" ).c_str() );
    root->Branch( ( name+".Energy_MuonCleaned" ).c_str(),                           Energy_MuonCleaned,                           ( name+".Energy_MuonCleaned["+name+".Size]/F" ).c_str() );
    root->Branch( ( name+".Unc" ).c_str(),                                          Unc,                                          ( name+".Unc["+name+".Size]/F" ).c_str() );
    root->Branch( ( name+".JesUnc" ).c_str(),                                       JesUnc,                                       ( name+".JesUnc["+name+".Size]/F" ).c_str() );
    root->Branch( ( name+".JERPt" ).c_str(),                                        JERPt,                                        ( name+".JERPt["+name+".Size]/F" ).c_str() );
    root->Branch( ( name+".JERPhi" ).c_str(),                                       JERPhi,                                       ( name+".JERPhi["+name+".Size]/F" ).c_str() );
    root->Branch( ( name+".JERScale" ).c_str(),                                     JERScale,                                     ( name+".JERScale["+name+".Size]/F" ).c_str() );
    root->Branch( ( name+".JERScaleUp" ).c_str(),                                   JERScaleUp,                                   ( name+".JERScaleUp["+name+".Size]/F" ).c_str() );
    root->Branch( ( name+".JERScaleDown" ).c_str(),                                 JERScaleDown,                                 ( name+".JERScaleDown["+name+".Size]/F" ).c_str() );
    root->Branch( ( name+".QGTagsLikelihood" ).c_str(),                             QGTagsLikelihood,                             ( name+".QGTagsLikelihood["+name+".Size]/F" ).c_str() );
    root->Branch( ( name+".PUJetIDfullDiscriminant" ).c_str(),                      PUJetIDfullDiscriminant,                      ( name+".PUJetIDfullDiscriminant["+name+".Size]/F" ).c_str() );
    root->Branch( ( name+".PUJetIDcutbased" ).c_str(),                              PUJetIDcutbased,                              ( name+".PUJetIDcutbased["+name+".Size]/I" ).c_str() );
    root->Branch( ( name+".NCH" ).c_str(),                                          NCH,                                          ( name+".NCH["+name+".Size]/I" ).c_str() );
    root->Branch( ( name+".NNH" ).c_str(),                                          NNH,                                          ( name+".NNH["+name+".Size]/I" ).c_str() );
    root->Branch( ( name+".NNHw" ).c_str(),                                         NNHw,                                         ( name+".NNHw["+name+".Size]/I" ).c_str() );
    root->Branch( ( name+".JM" ).c_str(),                                           JM,                                           ( name+".JM["+name+".Size]/I" ).c_str() );
    root->Branch( ( name+".JMw" ).c_str(),                                          JMw,                                          ( name+".JMw["+name+".Size]/I" ).c_str() );
    root->Branch( ( name+".CEF" ).c_str(),                                          CEF,                                          ( name+".CEF["+name+".Size]/F" ).c_str() );
    root->Branch( ( name+".CHF" ).c_str(),                                          CHF,                                          ( name+".CHF["+name+".Size]/F" ).c_str() );
    root->Branch( ( name+".NEF" ).c_str(),                                          NEF,                                          ( name+".NEF["+name+".Size]/F" ).c_str() );
    root->Branch( ( name+".NHF" ).c_str(),                                          NHF,                                          ( name+".NHF["+name+".Size]/F" ).c_str() );
    root->Branch( ( name+".MUF" ).c_str(),                                          MUF,                                          ( name+".MUF["+name+".Size]/F" ).c_str() );
    root->Branch( ( name+".PtCorrRaw" ).c_str(),                                    PtCorrRaw,                                    ( name+".PtCorrRaw["+name+".Size]/F" ).c_str() );
    root->Branch( ( name+".PtCorrL2" ).c_str(),                                     PtCorrL2,                                     ( name+".PtCorrL2["+name+".Size]/F" ).c_str() );
    root->Branch( ( name+".PtCorrL3" ).c_str(),                                     PtCorrL3,                                     ( name+".PtCorrL3["+name+".Size]/F" ).c_str() );
    root->Branch( ( name+".pfDeepCSVJetTags_probb" ).c_str(),                       pfDeepCSVJetTags_probb,                       ( name+".pfDeepCSVJetTags_probb["+name+".Size]/F" ).c_str() );
    root->Branch( ( name+".pfDeepCSVJetTags_probbb" ).c_str(),                      pfDeepCSVJetTags_probbb,                      ( name+".pfDeepCSVJetTags_probbb["+name+".Size]/F" ).c_str() );
    root->Branch( ( name+".pfDeepCSVJetTags_probc" ).c_str(),                       pfDeepCSVJetTags_probc,                       ( name+".pfDeepCSVJetTags_probc["+name+".Size]/F" ).c_str() );
    root->Branch( ( name+".pfDeepCSVJetTags_probudsg" ).c_str(),                    pfDeepCSVJetTags_probudsg,                    ( name+".pfDeepCSVJetTags_probudsg["+name+".Size]/F" ).c_str() );
    root->Branch( ( name+".pfDeepFlavourJetTags_probb" ).c_str(),                   pfDeepFlavourJetTags_probb,                   ( name+".pfDeepFlavourJetTags_probb["+name+".Size]/F" ).c_str() );
    root->Branch( ( name+".pfDeepFlavourJetTags_probbb" ).c_str(),                  pfDeepFlavourJetTags_probbb,                  ( name+".pfDeepFlavourJetTags_probbb["+name+".Size]/F" ).c_str() );
    root->Branch( ( name+".pfDeepFlavourJetTags_problepb" ).c_str(),                pfDeepFlavourJetTags_problepb,                ( name+".pfDeepFlavourJetTags_problepb["+name+".Size]/F" ).c_str() );
    root->Branch( ( name+".pfDeepFlavourJetTags_probc" ).c_str(),                   pfDeepFlavourJetTags_probc,                   ( name+".pfDeepFlavourJetTags_probc["+name+".Size]/F" ).c_str() );
    root->Branch( ( name+".pfDeepFlavourJetTags_probuds" ).c_str(),                 pfDeepFlavourJetTags_probuds,                 ( name+".pfDeepFlavourJetTags_probuds["+name+".Size]/F" ).c_str() );
    root->Branch( ( name+".pfDeepFlavourJetTags_probg" ).c_str(),                   pfDeepFlavourJetTags_probg,                   ( name+".pfDeepFlavourJetTags_probg["+name+".Size]/F" ).c_str() );
    root->Branch( ( name+".pfBoostedDoubleSecondaryVertexAK8BJetTags" ).c_str(),    pfBoostedDoubleSecondaryVertexAK8BJetTags,    ( name+".pfBoostedDoubleSecondaryVertexAK8BJetTags["+name+".Size]/F" ).c_str() );
    root->Branch( ( name+".pfMassIndependentDeepDoubleBvLJetTags_probHbb" ).c_str(),pfMassIndependentDeepDoubleBvLJetTags_probHbb,( name+".pfMassIndependentDeepDoubleBvLJetTags_probHbb["+name+".Size]/F" ).c_str() );
    root->Branch( ( name+".GenJetPt" ).c_str(),                                     GenJetPt,                                     ( name+".GenJetPt["+name+".Size]/F" ).c_str() );
    root->Branch( ( name+".GenJetEta" ).c_str(),                                    GenJetEta,                                    ( name+".GenJetEta["+name+".Size]/F" ).c_str() );
    root->Branch( ( name+".GenJetPhi" ).c_str(),                                    GenJetPhi,                                    ( name+".GenJetPhi["+name+".Size]/F" ).c_str() );
    root->Branch( ( name+".GenPt" ).c_str(),                                        GenPt,                                        ( name+".GenPt["+name+".Size]/F" ).c_str() );
    root->Branch( ( name+".GenEta" ).c_str(),                                       GenEta,                                       ( name+".GenEta["+name+".Size]/F" ).c_str() );
    root->Branch( ( name+".GenPhi" ).c_str(),                                       GenPhi,                                       ( name+".GenPhi["+name+".Size]/F" ).c_str() );
    root->Branch( ( name+".GenPdgID" ).c_str(),                                     GenPdgID,                                     ( name+".GenPdgID["+name+".Size]/I" ).c_str() );
    root->Branch( ( name+".GenFlavor" ).c_str(),                                    GenFlavor,                                    ( name+".GenFlavor["+name+".Size]/I" ).c_str() );
    root->Branch( ( name+".GenHadronFlavor" ).c_str(),                              GenHadronFlavor,                              ( name+".GenHadronFlavor["+name+".Size]/I" ).c_str() );
    root->Branch( ( name+".GenMCTag" ).c_str(),                                     GenMCTag,                                     ( name+".GenMCTag["+name+".Size]/I" ).c_str() );
    root->Branch( ( name+".NSubjets" ).c_str(),                                     NSubjets,                                     ( name+".NSubjets["+name+".Size]/I" ).c_str() );
    root->Branch( ( name+".SubjetsIdxStart" ).c_str(),                              SubjetsIdxStart,                              ( name+".SubjetsIdxStart["+name+".Size]/I" ).c_str() );
    root->Branch( ( name+".NjettinessAK8tau1" ).c_str(),                            NjettinessAK8tau1,                            ( name+".NjettinessAK8tau1["+name+".Size]/F" ).c_str() );
    root->Branch( ( name+".NjettinessAK8tau2" ).c_str(),                            NjettinessAK8tau2,                            ( name+".NjettinessAK8tau2["+name+".Size]/F" ).c_str() );
    root->Branch( ( name+".NjettinessAK8tau3" ).c_str(),                            NjettinessAK8tau3,                            ( name+".NjettinessAK8tau3["+name+".Size]/F" ).c_str() );
    root->Branch( ( name+".PuppiSoftDrop_ECFb1N2" ).c_str(),                        PuppiSoftDrop_ECFb1N2,                        ( name+".PuppiSoftDrop_ECFb1N2["+name+".Size]/F" ).c_str() );
    root->Branch( ( name+".PuppiSoftDrop_ECFb1N3" ).c_str(),                        PuppiSoftDrop_ECFb1N3,                        ( name+".PuppiSoftDrop_ECFb1N3["+name+".Size]/F" ).c_str() );
    root->Branch( ( name+".ak8PFJetsCHSSoftDropMass" ).c_str(),                     ak8PFJetsCHSSoftDropMass,                     ( name+".ak8PFJetsCHSSoftDropMass["+name+".Size]/F" ).c_str() );
    root->Branch( ( name+".ak8PFJetsCHSPrunedMass" ).c_str(),                       ak8PFJetsCHSPrunedMass,                       ( name+".ak8PFJetsCHSPrunedMass["+name+".Size]/F" ).c_str() );
    root->Branch( ( name+".ak8PFJetsCHSTrimmedMass" ).c_str(),                      ak8PFJetsCHSTrimmedMass,                      ( name+".ak8PFJetsCHSTrimmedMass["+name+".Size]/F" ).c_str() );
    root->Branch( ( name+".ak8PFJetsCHSFilteredMass" ).c_str(),                     ak8PFJetsCHSFilteredMass,                     ( name+".ak8PFJetsCHSFilteredMass["+name+".Size]/F" ).c_str() );
    root->Branch( ( name+".topJetMass" ).c_str(),                                   topJetMass,                                   ( name+".topJetMass["+name+".Size]/F" ).c_str() );
    root->Branch( ( name+".ca8TopMass" ).c_str(),                                   ca8TopMass,                                   ( name+".ca8TopMass["+name+".Size]/F" ).c_str() );
    root->Branch( ( name+".ca8MinMass" ).c_str(),                                   ca8MinMass,                                   ( name+".ca8MinMass["+name+".Size]/F" ).c_str() );
    root->Branch( ( name+".SubjetMass" ).c_str(),                                   &SubjetMass_w );
    root->Branch( ( name+".SubjetPt" ).c_str(),                                     &SubjetPt_w );
    root->Branch( ( name+".SubjetEt" ).c_str(),                                     &SubjetEt_w );
    root->Branch( ( name+".SubjetEta" ).c_str(),                                    &SubjetEta_w );
    root->Branch( ( name+".SubjetPhi" ).c_str(),                                    &SubjetPhi_w );
    root->Branch( ( name+".SubjetArea" ).c_str(),                                   &SubjetArea_w );
    root->Branch( ( name+".SubjetPtUncorr" ).c_str(),                               &SubjetPtUncorr_w );
    root->Branch( ( name+".SubjetDeepCSVJetTags_probb" ).c_str(),                   &SubjetDeepCSVJetTags_probb_w );
    root->Branch( ( name+".SubjetDeepCSVJetTags_probbb" ).c_str(),                  &SubjetDeepCSVJetTags_probbb_w );
    root->Branch( ( name+".PuppiSoftDrop_SubjetECFb1N2" ).c_str(),                  &PuppiSoftDrop_SubjetECFb1N2_w );
    root->Branch( ( name+".PuppiSoftDrop_SubjetECFb1N3" ).c_str(),                  &PuppiSoftDrop_SubjetECFb1N3_w );
    root->Branch( ( name+".SubjetGenPdgId" ).c_str(),                               &SubjetGenPdgId_w );
    root->Branch( ( name+".SubjetGenFlavour" ).c_str(),                             &SubjetGenFlavour_w );
    root->Branch( ( name+".SubjetHadronFlavour" ).c_str(),                          &SubjetHadronFlavour_w );
    root->Branch( ( name+".TempPt1" ).c_str(),                                      TempPt1,     ( name+".TempPt1["+name+".Size]/F" ).c_str() );
    root->Branch( ( name+".TempEta1" ).c_str(),                                     TempEta1,    ( name+".TempEta1["+name+".Size]/F" ).c_str() );
    root->Branch( ( name+".TempPhi1" ).c_str(),                                     TempPhi1,    ( name+".TempPhi1["+name+".Size]/F" ).c_str() );
    root->Branch( ( name+".TempEnergy1" ).c_str(),                                  TempEnergy1, ( name+".TempEnergy1["+name+".Size]/F" ).c_str() );
    root->Branch( ( name+".TempPt2" ).c_str(),                                      TempPt2,     ( name+".TempPt2["+name+".Size]/F" ).c_str() );
    root->Branch( ( name+".TempEta2" ).c_str(),                                     TempEta2,    ( name+".TempEta2["+name+".Size]/F" ).c_str() );
    root->Branch( ( name+".TempPhi2" ).c_str(),                                     TempPhi2,    ( name+".TempPhi2["+name+".Size]/F" ).c_str() );
    root->Branch( ( name+".TempEnergy2" ).c_str(),                                  TempEnergy2, ( name+".TempEnergy2["+name+".Size]/F" ).c_str() );
    root->Branch( ( name+".TempFloat1" ).c_str(),                                   TempFloat1,  ( name+".TempFloat1["+name+".Size]/F" ).c_str() );
    root->Branch( ( name+".TempFloat2" ).c_str(),                                   TempFloat2,  ( name+".TempFloat2["+name+".Size]/F" ).c_str() );
    root->Branch( ( name+".TempFloat3" ).c_str(),                                   TempFloat3,  ( name+".TempFloat3["+name+".Size]/F" ).c_str() );
    root->Branch( ( name+".TempFloat4" ).c_str(),                                   TempFloat4,  ( name+".TempFloat4["+name+".Size]/F" ).c_str() );
  }

  void
  Register( TTree* root, const std::string& name = "JetInfo" )
  {
    root->SetBranchAddress( ( name+".Size" ).c_str(),                                         &Size );
    root->SetBranchAddress( ( name+".Index" ).c_str(),                                        Index );
    root->SetBranchAddress( ( name+".NTracks" ).c_str(),                                      NTracks );
    root->SetBranchAddress( ( name+".Et" ).c_str(),                                           Et );
    root->SetBranchAddress( ( name+".Pt" ).c_str(),                                           Pt );
    root->SetBranchAddress( ( name+".Eta" ).c_str(),                                          Eta );
    root->SetBranchAddress( ( name+".Phi" ).c_str(),                                          Phi );
    root->SetBranchAddress( ( name+".Px" ).c_str(),                                           Px );
    root->SetBranchAddress( ( name+".Py" ).c_str(),                                           Py );
    root->SetBranchAddress( ( name+".Pz" ).c_str(),                                           Pz );
    root->SetBranchAddress( ( name+".Energy" ).c_str(),                                       Energy );
    root->SetBranchAddress( ( name+".Mass" ).c_str(),                                         Mass );
    root->SetBranchAddress( ( name+".Area" ).c_str(),                                         Area );
    root->SetBranchAddress( ( name+".JetCharge" ).c_str(),                                    JetCharge );
    root->SetBranchAddress( ( name+".NConstituents" ).c_str(),                                NConstituents );
    root->SetBranchAddress( ( name+".Pt_MuonCleaned" ).c_str(),                               Pt_MuonCleaned );
    root->SetBranchAddress( ( name+".Eta_MuonCleaned" ).c_str(),                              Eta_MuonCleaned );
    root->SetBranchAddress( ( name+".Phi_MuonCleaned" ).c_str(),                              Phi_MuonCleaned );
    root->SetBranchAddress( ( name+".Energy_MuonCleaned" ).c_str(),                           Energy_MuonCleaned );
    root->SetBranchAddress( ( name+".Unc" ).c_str(),                                          Unc );
    root->SetBranchAddress( ( name+".JesUnc" ).c_str(),                                       JesUnc );
    root->SetBranchAddress( ( name+".JERPt" ).c_str(),                                        JERPt );
    root->SetBranchAddress( ( name+".JERPhi" ).c_str(),                                       JERPhi );
    root->SetBranchAddress( ( name+".JERScale" ).c_str(),                                     JERScale );
    root->SetBranchAddress( ( name+".JERScaleUp" ).c_str(),                                   JERScaleUp );
    root->SetBranchAddress( ( name+".JERScaleDown" ).c_str(),                                 JERScaleDown );
    root->SetBranchAddress( ( name+".QGTagsLikelihood" ).c_str(),                             QGTagsLikelihood );
    root->SetBranchAddress( ( name+".PUJetIDfullDiscriminant" ).c_str(),                      PUJetIDfullDiscriminant );
    root->SetBranchAddress( ( name+".PUJetIDcutbased" ).c_str(),                              PUJetIDcutbased );
    root->SetBranchAddress( ( name+".NCH" ).c_str(),                                          NCH );
    root->SetBranchAddress( ( name+".NNH" ).c_str(),                                          NNH );
    root->SetBranchAddress( ( name+".NNHw" ).c_str(),                                         NNHw );
    root->SetBranchAddress( ( name+".JM" ).c_str(),                                           JM );
    root->SetBranchAddress( ( name+".JMw" ).c_str(),                                          JMw );
    root->SetBranchAddress( ( name+".CEF" ).c_str(),                                          CEF );
    root->SetBranchAddress( ( name+".CHF" ).c_str(),                                          CHF );
    root->SetBranchAddress( ( name+".NEF" ).c_str(),                                          NEF );
    root->SetBranchAddress( ( name+".NHF" ).c_str(),                                          NHF );
    root->SetBranchAddress( ( name+".MUF" ).c_str(),                                          MUF );
    root->SetBranchAddress( ( name+".PtCorrRaw" ).c_str(),                                    PtCorrRaw );
    root->SetBranchAddress( ( name+".PtCorrL2" ).c_str(),                                     PtCorrL2 );
    root->SetBranchAddress( ( name+".PtCorrL3" ).c_str(),                                     PtCorrL3 );
    root->SetBranchAddress( ( name+".pfDeepCSVJetTags_probb" ).c_str(),                       pfDeepCSVJetTags_probb );
    root->SetBranchAddress( ( name+".pfDeepCSVJetTags_probbb" ).c_str(),                      pfDeepCSVJetTags_probbb );
    root->SetBranchAddress( ( name+".pfDeepCSVJetTags_probc" ).c_str(),                       pfDeepCSVJetTags_probc );
    root->SetBranchAddress( ( name+".pfDeepCSVJetTags_probudsg" ).c_str(),                    pfDeepCSVJetTags_probudsg );
    root->SetBranchAddress( ( name+".pfDeepFlavourJetTags_probb" ).c_str(),                   pfDeepFlavourJetTags_probb );
    root->SetBranchAddress( ( name+".pfDeepFlavourJetTags_probbb" ).c_str(),                  pfDeepFlavourJetTags_probbb );
    root->SetBranchAddress( ( name+".pfDeepFlavourJetTags_problepb" ).c_str(),                pfDeepFlavourJetTags_problepb );
    root->SetBranchAddress( ( name+".pfDeepFlavourJetTags_probc" ).c_str(),                   pfDeepFlavourJetTags_probc );
    root->SetBranchAddress( ( name+".pfDeepFlavourJetTags_probuds" ).c_str(),                 pfDeepFlavourJetTags_probuds );
    root->SetBranchAddress( ( name+".pfDeepFlavourJetTags_probg" ).c_str(),                   pfDeepFlavourJetTags_probg );
    root->SetBranchAddress( ( name+".pfBoostedDoubleSecondaryVertexAK8BJetTags" ).c_str(),    pfBoostedDoubleSecondaryVertexAK8BJetTags );
    root->SetBranchAddress( ( name+".pfMassIndependentDeepDoubleBvLJetTags_probHbb" ).c_str(),pfMassIndependentDeepDoubleBvLJetTags_probHbb );
    root->SetBranchAddress( ( name+".GenJetPt" ).c_str(),                                     GenJetPt );
    root->SetBranchAddress( ( name+".GenJetEta" ).c_str(),                                    GenJetEta );
    root->SetBranchAddress( ( name+".GenJetPhi" ).c_str(),                                    GenJetPhi );
    root->SetBranchAddress( ( name+".GenPt" ).c_str(),                                        GenPt );
    root->SetBranchAddress( ( name+".GenEta" ).c_str(),                                       GenEta );
    root->SetBranchAddress( ( name+".GenPhi" ).c_str(),                                       GenPhi );
    root->SetBranchAddress( ( name+".GenPdgID" ).c_str(),                                     GenPdgID );
    root->SetBranchAddress( ( name+".GenFlavor" ).c_str(),                                    GenFlavor );
    root->SetBranchAddress( ( name+".GenHadronFlavor" ).c_str(),                              GenHadronFlavor );
    root->SetBranchAddress( ( name+".GenMCTag" ).c_str(),                                     GenMCTag );
    root->SetBranchAddress( ( name+".NSubjets" ).c_str(),                                     NSubjets );
    root->SetBranchAddress( ( name+".SubjetsIdxStart" ).c_str(),                              SubjetsIdxStart );
    root->SetBranchAddress( ( name+".NjettinessAK8tau1" ).c_str(),                            NjettinessAK8tau1 );
    root->SetBranchAddress( ( name+".NjettinessAK8tau2" ).c_str(),                            NjettinessAK8tau2 );
    root->SetBranchAddress( ( name+".NjettinessAK8tau3" ).c_str(),                            NjettinessAK8tau3 );
    root->SetBranchAddress( ( name+".PuppiSoftDrop_ECFb1N2" ).c_str(),                        PuppiSoftDrop_ECFb1N2 );
    root->SetBranchAddress( ( name+".PuppiSoftDrop_ECFb1N3" ).c_str(),                        PuppiSoftDrop_ECFb1N3 );
    root->SetBranchAddress( ( name+".ak8PFJetsCHSSoftDropMass" ).c_str(),                     ak8PFJetsCHSSoftDropMass );
    root->SetBranchAddress( ( name+".ak8PFJetsCHSPrunedMass" ).c_str(),                       ak8PFJetsCHSPrunedMass );
    root->SetBranchAddress( ( name+".ak8PFJetsCHSTrimmedMass" ).c_str(),                      ak8PFJetsCHSTrimmedMass );
    root->SetBranchAddress( ( name+".ak8PFJetsCHSFilteredMass" ).c_str(),                     ak8PFJetsCHSFilteredMass );
    root->SetBranchAddress( ( name+".topJetMass" ).c_str(),                                   topJetMass );
    root->SetBranchAddress( ( name+".ca8TopMass" ).c_str(),                                   ca8TopMass );
    root->SetBranchAddress( ( name+".ca8MinMass" ).c_str(),                                   ca8MinMass );
    SubjetMass = 0;
    root->SetBranchAddress( ( name+".SubjetMass" ).c_str(),                                   &SubjetMass );
    SubjetPt = 0;
    root->SetBranchAddress( ( name+".SubjetPt" ).c_str(),                                     &SubjetPt );
    SubjetEt = 0;
    root->SetBranchAddress( ( name+".SubjetEt" ).c_str(),                                     &SubjetEt );
    SubjetEta = 0;
    root->SetBranchAddress( ( name+".SubjetEta" ).c_str(),                                    &SubjetEta );
    SubjetPhi = 0;
    root->SetBranchAddress( ( name+".SubjetPhi" ).c_str(),                                    &SubjetPhi );
    SubjetArea = 0;
    root->SetBranchAddress( ( name+".SubjetArea" ).c_str(),                                   &SubjetArea );
    SubjetPtUncorr = 0;
    root->SetBranchAddress( ( name+".SubjetPtUncorr" ).c_str(),                               &SubjetPtUncorr );
    SubjetDeepCSVJetTags_probb = 0;
    root->SetBranchAddress( ( name+".SubjetDeepCSVJetTags_probb" ).c_str(),                   &SubjetDeepCSVJetTags_probb );
    SubjetDeepCSVJetTags_probbb = 0;
    root->SetBranchAddress( ( name+".SubjetDeepCSVJetTags_probbb" ).c_str(),                  &SubjetDeepCSVJetTags_probbb );
    PuppiSoftDrop_SubjetECFb1N2 = 0;
    root->SetBranchAddress( ( name+".PuppiSoftDrop_SubjetECFb1N2" ).c_str(),                  &PuppiSoftDrop_SubjetECFb1N2 );
    PuppiSoftDrop_SubjetECFb1N3 = 0;
    root->SetBranchAddress( ( name+".PuppiSoftDrop_SubjetECFb1N3" ).c_str(),                  &PuppiSoftDrop_SubjetECFb1N3 );
    SubjetGenPdgId = 0;
    root->SetBranchAddress( ( name+".SubjetGenPdgId" ).c_str(),                               &SubjetGenPdgId );
    SubjetGenFlavour = 0;
    root->SetBranchAddress( ( name+".SubjetGenFlavour" ).c_str(),                             &SubjetGenFlavour );
    SubjetHadronFlavour = 0;
    root->SetBranchAddress( ( name+".SubjetHadronFlavour" ).c_str(),                          &SubjetHadronFlavour );
    root->SetBranchAddress( ( name+".TempPt1" ).c_str(),                                      TempPt1 );
    root->SetBranchAddress( ( name+".TempEta1" ).c_str(),                                     TempEta1 );
    root->SetBranchAddress( ( name+".TempPhi1" ).c_str(),                                     TempPhi1 );
    root->SetBranchAddress( ( name+".TempEnergy1" ).c_str(),                                  TempEnergy1 );
    root->SetBranchAddress( ( name+".TempPt2" ).c_str(),                                      TempPt2 );
    root->SetBranchAddress( ( name+".TempEta2" ).c_str(),                                     TempEta2 );
    root->SetBranchAddress( ( name+".TempPhi2" ).c_str(),                                     TempPhi2 );
    root->SetBranchAddress( ( name+".TempEnergy2" ).c_str(),                                  TempEnergy2 );
    root->SetBranchAddress( ( name+".TempFloat1" ).c_str(),                                   TempFloat1 );
    root->SetBranchAddress( ( name+".TempFloat2" ).c_str(),                                   TempFloat2 );
    root->SetBranchAddress( ( name+".TempFloat3" ).c_str(),                                   TempFloat3 );
    root->SetBranchAddress( ( name+".TempFloat4" ).c_str(),                                   TempFloat4 );
  }
};

class LepInfoBranches
{
public:
  Int_t Size;
  Int_t Index [MAX_LEPTONS];
  Int_t LeptonType [MAX_LEPTONS];
  Int_t Charge [MAX_LEPTONS];
  Float_t Pt [MAX_LEPTONS];
  Float_t Et [MAX_LEPTONS];
  Float_t Eta [MAX_LEPTONS];
  Float_t Phi [MAX_LEPTONS];
  Float_t Px [MAX_LEPTONS];
  Float_t Py [MAX_LEPTONS];
  Float_t Pz [MAX_LEPTONS];
  Float_t Energy [MAX_LEPTONS];
  Float_t TrackerBasedIsoR03 [MAX_LEPTONS];
  Float_t EcalBasedIsoR03 [MAX_LEPTONS];
  Float_t HcalBasedIsoR03 [MAX_LEPTONS];
  Float_t ChargedHadronIsoR03 [MAX_LEPTONS];
  Float_t NeutralHadronIsoR03 [MAX_LEPTONS];
  Float_t PhotonIsoR03 [MAX_LEPTONS];
  Float_t sumPUPtR03 [MAX_LEPTONS];
  Float_t PFIsoRhoCorrR03 [MAX_LEPTONS];
  Float_t ChargedHadronIsoR04 [MAX_LEPTONS];
  Float_t NeutralHadronIsoR04 [MAX_LEPTONS];
  Float_t PhotonIsoR04 [MAX_LEPTONS];
  Float_t sumPUPtR04 [MAX_LEPTONS];
  Float_t PFIsoDeltaBetaCorrR04 [MAX_LEPTONS];
  Float_t EcalPFIsoRhoCorr2016 [MAX_LEPTONS];
  Float_t HcalPFIsoRhoCorr2016 [MAX_LEPTONS];
  Float_t Ip3dPV [MAX_LEPTONS];
  Float_t Ip3dPVErr [MAX_LEPTONS];
  Float_t Ip3dPVSignificance [MAX_LEPTONS];
  Float_t MiniIso [MAX_LEPTONS];
  Int_t MuType [MAX_LEPTONS];
  Bool_t isPFMuon [MAX_LEPTONS];
  Bool_t MuonCutBasedMuIdLOOSE [MAX_LEPTONS];
  Bool_t MuonCutBasedMuIdMEDIUM [MAX_LEPTONS];
  Bool_t MuonCutBasedMuIdTIGHT [MAX_LEPTONS];
  Bool_t MuonCutBasedIdGlobalHighPt [MAX_LEPTONS];
  Bool_t MuonCutBasedIdTrkHighPt [MAX_LEPTONS];
  Bool_t isGoodMuonTMOneStationTight [MAX_LEPTONS];
  Bool_t isGoodMuonGlobalMuonPromptTight [MAX_LEPTONS];
  Float_t MuInnerPt [MAX_LEPTONS];
  Float_t MuInnerEta [MAX_LEPTONS];
  Float_t MuInnerPhi [MAX_LEPTONS];
  Float_t MuInnerPtError [MAX_LEPTONS];
  Float_t innerTracknormalizedChi2 [MAX_LEPTONS];
  Float_t MuInnerTrackDz [MAX_LEPTONS];
  Float_t MuInnerTrackDxy [MAX_LEPTONS];
  Float_t MuInnerTrackVHitFrac [MAX_LEPTONS];
  Bool_t MuInnerTrackHighPurity [MAX_LEPTONS];
  Int_t MuInnerTrackNHits [MAX_LEPTONS];
  Int_t MuNTrackerHits [MAX_LEPTONS];
  Int_t MuNPixelLayers [MAX_LEPTONS];
  Int_t MuNPixelLayersWMeasurement [MAX_LEPTONS];
  Int_t MuNTrackLayersWMeasurement [MAX_LEPTONS];
  Float_t MuGlobalPt [MAX_LEPTONS];
  Float_t MuGlobalEta [MAX_LEPTONS];
  Float_t MuGlobalPhi [MAX_LEPTONS];
  Float_t MuGlobalPtError [MAX_LEPTONS];
  Float_t MuGlobalNormalizedChi2 [MAX_LEPTONS];
  Int_t MuNMuonhits [MAX_LEPTONS];
  Int_t MuDThits [MAX_LEPTONS];
  Int_t MuCSChits [MAX_LEPTONS];
  Int_t MuRPChits [MAX_LEPTONS];
  Float_t MuSegCompatibility [MAX_LEPTONS];
  Float_t MuSTATKMatchingChi2 [MAX_LEPTONS];
  Float_t MuInnerTrackKinkVal [MAX_LEPTONS];
  Int_t MuStationMask [MAX_LEPTONS];
  Int_t MuNMatchedStations [MAX_LEPTONS];
  Int_t MuExpectedNMatchedStations [MAX_LEPTONS];
  Int_t MuBestTrackType [MAX_LEPTONS];
  Float_t MuBestTrackPt [MAX_LEPTONS];
  Float_t MuBestTrackEta [MAX_LEPTONS];
  Float_t MuBestTrackPhi [MAX_LEPTONS];
  Float_t MuBestTrackPtError [MAX_LEPTONS];
  Float_t MuBestTrackDz [MAX_LEPTONS];
  Float_t MuBestTrackDxy [MAX_LEPTONS];
  Int_t MuBestTrackNMuonhits [MAX_LEPTONS];
  Int_t MuTunePBestTrackType [MAX_LEPTONS];
  Float_t MuTunePBestTrackPt [MAX_LEPTONS];
  Float_t MuTunePBestTrackEta [MAX_LEPTONS];
  Float_t MuTunePBestTrackPhi [MAX_LEPTONS];
  Float_t MuTunePBestTrackPtError [MAX_LEPTONS];
  Float_t MuTunePBestTrackDz [MAX_LEPTONS];
  Float_t MuTunePBestTrackDxy [MAX_LEPTONS];
  Int_t MuTunePBestTrackNMuonhits [MAX_LEPTONS]; 
  Int_t MuontimenDof [MAX_LEPTONS];
  Float_t MuontimeAtIpInOut [MAX_LEPTONS];
  Float_t MuontimeAtIpOutIn [MAX_LEPTONS];
  Int_t Muondirection [MAX_LEPTONS];
  Bool_t isPFElectron [MAX_LEPTONS];
  Float_t ElEnergyCorrFactor [MAX_LEPTONS];
  Float_t ElEnergyPreCorrErr [MAX_LEPTONS];
  Float_t ElEnergyPostCorrErr [MAX_LEPTONS];
  Float_t ElEnergyPostCorrScaleUp [MAX_LEPTONS];
  Float_t ElEnergyPostCorrScaleDown [MAX_LEPTONS];
  Float_t ElEnergyPostCorrSmearUp [MAX_LEPTONS];
  Float_t ElEnergyPostCorrSmearDown [MAX_LEPTONS];
  Bool_t EgammaCutBasedEleIdVETO [MAX_LEPTONS];
  Bool_t EgammaCutBasedEleIdLOOSE [MAX_LEPTONS];
  Bool_t EgammaCutBasedEleIdMEDIUM [MAX_LEPTONS];
  Bool_t EgammaCutBasedEleIdTIGHT [MAX_LEPTONS];
  Bool_t EgammaCutBasedEleIdHEEP [MAX_LEPTONS];
  Float_t EtaSC [MAX_LEPTONS];
  Float_t PhiSC [MAX_LEPTONS];
  Float_t rawEnergySC [MAX_LEPTONS];
  Float_t EnergySC [MAX_LEPTONS];
  Float_t ESEnergySC [MAX_LEPTONS];
  Float_t R9 [MAX_LEPTONS];
  Float_t E1x5 [MAX_LEPTONS];
  Float_t E2x5Max [MAX_LEPTONS];
  Float_t E5x5 [MAX_LEPTONS];
  Float_t SigmaIetaIeta [MAX_LEPTONS];
  Float_t SigmaIetaIphi [MAX_LEPTONS];
  Float_t SigmaIphiIphi [MAX_LEPTONS];
  Float_t EtaWidth [MAX_LEPTONS];
  Float_t PhiWidth [MAX_LEPTONS];
  Float_t ElHadoverEm [MAX_LEPTONS];
  Float_t HcalDepth1Iso [MAX_LEPTONS];
  Float_t HcalDepth2Iso [MAX_LEPTONS];
  Float_t HEEPTrackIso [MAX_LEPTONS];
  Float_t EgammaMVANonTrig [MAX_LEPTONS];
  Float_t EgammaMVATrig [MAX_LEPTONS];
  Int_t isEcalDriven [MAX_LEPTONS];
  Int_t isTrackerDriven [MAX_LEPTONS];
  Int_t ElTightCharge [MAX_LEPTONS];
  Float_t ElMomentum [MAX_LEPTONS];
  Float_t ElMomentumErr [MAX_LEPTONS];
  Float_t ElTrackPt [MAX_LEPTONS];
  Float_t ElTrackEta [MAX_LEPTONS];
  Float_t ElTrackPhi [MAX_LEPTONS];
  Float_t ElTrackDz [MAX_LEPTONS];
  Float_t ElTrackDxy [MAX_LEPTONS];
  Float_t ElTrackNormalizedChi2 [MAX_LEPTONS];
  Int_t ElNTrackLayersWMeasurement [MAX_LEPTONS];
  Int_t ElTrackNHits [MAX_LEPTONS];
  Int_t NumberOfExpectedInnerHits [MAX_LEPTONS];
  Int_t ElClassification [MAX_LEPTONS];
  Float_t ElFBrem [MAX_LEPTONS];
  Int_t ElNumberOfBrems [MAX_LEPTONS];
  Bool_t ElhasConv [MAX_LEPTONS];
  Float_t ElEcalE [MAX_LEPTONS];
  Float_t ElEnergyErr [MAX_LEPTONS];
  Float_t ElEoverP [MAX_LEPTONS];
  Float_t EldeltaEta [MAX_LEPTONS];
  Float_t EldeltaPhi [MAX_LEPTONS];
  Float_t EldeltaEtaSeed [MAX_LEPTONS];
  Int_t isPFTau [MAX_LEPTONS];
  Float_t GenPt [MAX_LEPTONS];
  Float_t GenEta [MAX_LEPTONS];
  Float_t GenPhi [MAX_LEPTONS];
  Int_t GenPdgID [MAX_LEPTONS];
  Int_t GenMCTag [MAX_LEPTONS];
  Float_t TempPt1 [MAX_LEPTONS];
  Float_t TempEta1 [MAX_LEPTONS];
  Float_t TempPhi1 [MAX_LEPTONS];
  Float_t TempEnergy1 [MAX_LEPTONS];
  Float_t TempPt2 [MAX_LEPTONS];
  Float_t TempEta2 [MAX_LEPTONS];
  Float_t TempPhi2 [MAX_LEPTONS];
  Float_t TempEnergy2 [MAX_LEPTONS];
  Float_t TempFloat1 [MAX_LEPTONS];
  Float_t TempFloat2 [MAX_LEPTONS];
  Float_t TempFloat3 [MAX_LEPTONS];
  Float_t TempFloat4 [MAX_LEPTONS];

  void
  RegisterTree( TTree* root, const std::string& name = "LepInfo" )
  {
    root->Branch( ( name+".Size" ).c_str(),                            &Size,                           ( name+"Size/I" ).c_str() );
    root->Branch( ( name+".Index" ).c_str(),                           Index,                           ( name+".Index["+name+".Size]/I" ).c_str() );
    root->Branch( ( name+".LeptonType" ).c_str(),                      LeptonType,                      ( name+".LeptonType["+name+".Size]/I" ).c_str() );
    root->Branch( ( name+".Charge" ).c_str(),                          Charge,                          ( name+".Charge["+name+".Size]/I" ).c_str() );
    root->Branch( ( name+".Pt" ).c_str(),                              Pt,                              ( name+".Pt["+name+".Size]/F" ).c_str() );
    root->Branch( ( name+".Et" ).c_str(),                              Et,                              ( name+".Et["+name+".Size]/F" ).c_str() );
    root->Branch( ( name+".Eta" ).c_str(),                             Eta,                             ( name+".Eta["+name+".Size]/F" ).c_str() );
    root->Branch( ( name+".Phi" ).c_str(),                             Phi,                             ( name+".Phi["+name+".Size]/F" ).c_str() );
    root->Branch( ( name+".Px" ).c_str(),                              Px,                              ( name+".Px["+name+".Size]/F" ).c_str() );
    root->Branch( ( name+".Py" ).c_str(),                              Py,                              ( name+".Py["+name+".Size]/F" ).c_str() );
    root->Branch( ( name+".Pz" ).c_str(),                              Pz,                              ( name+".Pz["+name+".Size]/F" ).c_str() );
    root->Branch( ( name+".Energy" ).c_str(),                          Energy,                          ( name+".Energy["+name+".Size]/F" ).c_str() );
    root->Branch( ( name+".TrackerBasedIsoR03" ).c_str(),              TrackerBasedIsoR03,              ( name+".TrackerBasedIsoR03["+name+".Size]/F" ).c_str() );
    root->Branch( ( name+".EcalBasedIsoR03" ).c_str(),                 EcalBasedIsoR03,                 ( name+".EcalBasedIsoR03["+name+".Size]/F" ).c_str() );
    root->Branch( ( name+".HcalBasedIsoR03" ).c_str(),                 HcalBasedIsoR03,                 ( name+".HcalBasedIsoR03["+name+".Size]/F" ).c_str() );
    root->Branch( ( name+".ChargedHadronIsoR03" ).c_str(),             ChargedHadronIsoR03,             ( name+".ChargedHadronIsoR03["+name+".Size]/F" ).c_str() );
    root->Branch( ( name+".NeutralHadronIsoR03" ).c_str(),             NeutralHadronIsoR03,             ( name+".NeutralHadronIsoR03["+name+".Size]/F" ).c_str() );
    root->Branch( ( name+".PhotonIsoR03" ).c_str(),                    PhotonIsoR03,                    ( name+".PhotonIsoR03["+name+".Size]/F" ).c_str() );
    root->Branch( ( name+".sumPUPtR03" ).c_str(),                      sumPUPtR03,                      ( name+".sumPUPtR03["+name+".Size]/F" ).c_str() );
    root->Branch( ( name+".PFIsoRhoCorrR03" ).c_str(),                 PFIsoRhoCorrR03,                 ( name+".PFIsoRhoCorrR03["+name+".Size]/F" ).c_str() );
    root->Branch( ( name+".ChargedHadronIsoR04" ).c_str(),             ChargedHadronIsoR04,             ( name+".ChargedHadronIsoR04["+name+".Size]/F" ).c_str() );
    root->Branch( ( name+".NeutralHadronIsoR04" ).c_str(),             NeutralHadronIsoR04,             ( name+".NeutralHadronIsoR04["+name+".Size]/F" ).c_str() );
    root->Branch( ( name+".PhotonIsoR04" ).c_str(),                    PhotonIsoR04,                    ( name+".PhotonIsoR04["+name+".Size]/F" ).c_str() );
    root->Branch( ( name+".sumPUPtR04" ).c_str(),                      sumPUPtR04,                      ( name+".sumPUPtR04["+name+".Size]/F" ).c_str() );
    root->Branch( ( name+".PFIsoDeltaBetaCorrR04" ).c_str(),           PFIsoDeltaBetaCorrR04,           ( name+".PFIsoDeltaBetaCorrR04["+name+".Size]/F" ).c_str() );
    root->Branch( ( name+".EcalPFIsoRhoCorr2016" ).c_str(),            EcalPFIsoRhoCorr2016,            ( name+".EcalPFIsoRhoCorr2016["+name+".Size]/F" ).c_str() );
    root->Branch( ( name+".HcalPFIsoRhoCorr2016" ).c_str(),            HcalPFIsoRhoCorr2016,            ( name+".HcalPFIsoRhoCorr2016["+name+".Size]/F" ).c_str() );
    root->Branch( ( name+".Ip3dPV" ).c_str(),                          Ip3dPV,                          ( name+".Ip3dPV["+name+".Size]/F" ).c_str() );
    root->Branch( ( name+".Ip3dPVErr" ).c_str(),                       Ip3dPVErr,                       ( name+".Ip3dPVErr["+name+".Size]/F" ).c_str() );
    root->Branch( ( name+".Ip3dPVSignificance" ).c_str(),              Ip3dPVSignificance,              ( name+".Ip3dPVSignificance["+name+".Size]/F" ).c_str() );
    root->Branch( ( name+".MiniIso" ).c_str(),                         MiniIso,                         ( name+".MiniIso["+name+".Size]/F" ).c_str() );
    root->Branch( ( name+".MuType" ).c_str(),                          MuType,                          ( name+".MuType["+name+".Size]/I" ).c_str() );
    root->Branch( ( name+".isPFMuon" ).c_str(),                        isPFMuon,                        ( name+".isPFMuon["+name+".Size]/O" ).c_str() );
    root->Branch( ( name+".MuonCutBasedMuIdLOOSE" ).c_str(),           MuonCutBasedMuIdLOOSE,           ( name+".MuonCutBasedMuIdLOOSE["+name+".Size]/O" ).c_str() );
    root->Branch( ( name+".MuonCutBasedMuIdMEDIUM" ).c_str(),          MuonCutBasedMuIdMEDIUM,          ( name+".MuonCutBasedMuIdMEDIUM["+name+".Size]/O" ).c_str() );
    root->Branch( ( name+".MuonCutBasedMuIdTIGHT" ).c_str(),           MuonCutBasedMuIdTIGHT,           ( name+".MuonCutBasedMuIdTIGHT["+name+".Size]/O" ).c_str() );
    root->Branch( ( name+".MuonCutBasedIdGlobalHighPt" ).c_str(),      MuonCutBasedIdGlobalHighPt,      ( name+".MuonCutBasedIdGlobalHighPt["+name+".Size]/O" ).c_str() );
    root->Branch( ( name+".MuonCutBasedIdTrkHighPt" ).c_str(),         MuonCutBasedIdTrkHighPt,         ( name+".MuonCutBasedIdTrkHighPt["+name+".Size]/O" ).c_str() );
    root->Branch( ( name+".isGoodMuonTMOneStationTight" ).c_str(),     isGoodMuonTMOneStationTight,     ( name+".isGoodMuonTMOneStationTight["+name+".Size]/O" ).c_str() );
    root->Branch( ( name+".isGoodMuonGlobalMuonPromptTight" ).c_str(), isGoodMuonGlobalMuonPromptTight, ( name+".isGoodMuonGlobalMuonPromptTight["+name+".Size]/O" ).c_str() );
    root->Branch( ( name+".MuInnerPt" ).c_str(),                       MuInnerPt,                       ( name+".MuInnerPt["+name+".Size]/F" ).c_str() );
    root->Branch( ( name+".MuInnerEta" ).c_str(),                      MuInnerEta,                      ( name+".MuInnerEta["+name+".Size]/F" ).c_str() );
    root->Branch( ( name+".MuInnerPhi" ).c_str(),                      MuInnerPhi,                      ( name+".MuInnerPhi["+name+".Size]/F" ).c_str() );
    root->Branch( ( name+".MuInnerPtError" ).c_str(),                  MuInnerPtError,                  ( name+".MuInnerPtError["+name+".Size]/F" ).c_str() );
    root->Branch( ( name+".innerTracknormalizedChi2" ).c_str(),        innerTracknormalizedChi2,        ( name+".innerTracknormalizedChi2["+name+".Size]/F" ).c_str() );
    root->Branch( ( name+".MuInnerTrackDz" ).c_str(),                  MuInnerTrackDz,                  ( name+".MuInnerTrackDz["+name+".Size]/F" ).c_str() );
    root->Branch( ( name+".MuInnerTrackDxy" ).c_str(),                 MuInnerTrackDxy,                 ( name+".MuInnerTrackDxy["+name+".Size]/F" ).c_str() );
    root->Branch( ( name+".MuInnerTrackVHitFrac" ).c_str(),            MuInnerTrackVHitFrac,            ( name+".MuInnerTrackVHitFrac["+name+".Size]/F" ).c_str() );
    root->Branch( ( name+".MuInnerTrackHighPurity" ).c_str(),          MuInnerTrackHighPurity,          ( name+".MuInnerTrackHighPurity["+name+".Size]/O" ).c_str() );
    root->Branch( ( name+".MuInnerTrackNHits" ).c_str(),               MuInnerTrackNHits,               ( name+".MuInnerTrackNHits["+name+".Size]/I" ).c_str() );
    root->Branch( ( name+".MuNTrackerHits" ).c_str(),                  MuNTrackerHits,                  ( name+".MuNTrackerHits["+name+".Size]/I" ).c_str() );
    root->Branch( ( name+".MuNPixelLayers" ).c_str(),                  MuNPixelLayers,                  ( name+".MuNPixelLayers["+name+".Size]/I" ).c_str() );
    root->Branch( ( name+".MuNPixelLayersWMeasurement" ).c_str(),      MuNPixelLayersWMeasurement,      ( name+".MuNPixelLayersWMeasurement["+name+".Size]/I" ).c_str() );
    root->Branch( ( name+".MuNTrackLayersWMeasurement" ).c_str(),      MuNTrackLayersWMeasurement,      ( name+".MuNTrackLayersWMeasurement["+name+".Size]/I" ).c_str() );
    root->Branch( ( name+".MuGlobalPt" ).c_str(),                      MuGlobalPt,                      ( name+".MuGlobalPt["+name+".Size]/F" ).c_str() );
    root->Branch( ( name+".MuGlobalEta" ).c_str(),                     MuGlobalEta,                     ( name+".MuGlobalEta["+name+".Size]/F" ).c_str() );
    root->Branch( ( name+".MuGlobalPhi" ).c_str(),                     MuGlobalPhi,                     ( name+".MuGlobalPhi["+name+".Size]/F" ).c_str() );
    root->Branch( ( name+".MuGlobalPtError" ).c_str(),                 MuGlobalPtError,                 ( name+".MuGlobalPtError["+name+".Size]/F" ).c_str() );
    root->Branch( ( name+".MuGlobalNormalizedChi2" ).c_str(),          MuGlobalNormalizedChi2,          ( name+".MuGlobalNormalizedChi2["+name+".Size]/F" ).c_str() );
    root->Branch( ( name+".MuNMatchedStations" ).c_str(),              MuNMatchedStations,              ( name+".MuNMatchedStations["+name+".Size]/I" ).c_str() );
    root->Branch( ( name+".MuNMuonhits" ).c_str(),                     MuNMuonhits,                     ( name+".MuNMuonhits["+name+".Size]/I" ).c_str() );
    root->Branch( ( name+".MuDThits" ).c_str(),                        MuDThits,                        ( name+".MuDThits["+name+".Size]/I" ).c_str() );
    root->Branch( ( name+".MuCSChits" ).c_str(),                       MuCSChits,                       ( name+".MuCSChits["+name+".Size]/I" ).c_str() );
    root->Branch( ( name+".MuRPChits" ).c_str(),                       MuRPChits,                       ( name+".MuRPChits["+name+".Size]/I" ).c_str() );
    root->Branch( ( name+".MuSegCompatibility" ).c_str(),              MuSegCompatibility,              ( name+".MuSegCompatibility["+name+".Size]/F" ).c_str() );
    root->Branch( ( name+".MuSTATKMatchingChi2" ).c_str(),             MuSTATKMatchingChi2,             ( name+".MuSTATKMatchingChi2["+name+".Size]/F" ).c_str() );
    root->Branch( ( name+".MuInnerTrackKinkVal" ).c_str(),             MuInnerTrackKinkVal,             ( name+".MuInnerTrackKinkVal["+name+".Size]/F" ).c_str() );
    root->Branch( ( name+".MuStationMask" ).c_str(),                   MuStationMask,                   ( name+".MuStationMask["+name+".Size]/I" ).c_str() );
    root->Branch( ( name+".MuNMatchedStations" ).c_str(),              MuNMatchedStations,              ( name+".MuNMatchedStations["+name+".Size]/I" ).c_str() );
    root->Branch( ( name+".MuExpectedNMatchedStations" ).c_str(),      MuExpectedNMatchedStations,      ( name+".MuExpectedNMatchedStations["+name+".Size]/I" ).c_str() );
    root->Branch( ( name+".MuBestTrackType" ).c_str(),                 MuBestTrackType,                 ( name+".MuBestTrackType["+name+".Size]/I" ).c_str() );
    root->Branch( ( name+".MuBestTrackPt" ).c_str(),                   MuBestTrackPt,                   ( name+".MuBestTrackPt["+name+".Size]/F" ).c_str() );
    root->Branch( ( name+".MuBestTrackEta" ).c_str(),                  MuBestTrackEta,                  ( name+".MuBestTrackEta["+name+".Size]/F" ).c_str() );
    root->Branch( ( name+".MuBestTrackPhi" ).c_str(),                  MuBestTrackPhi,                  ( name+".MuBestTrackPhi["+name+".Size]/F" ).c_str() );
    root->Branch( ( name+".MuBestTrackPtError" ).c_str(),              MuBestTrackPtError,              ( name+".MuBestTrackPtError["+name+".Size]/F" ).c_str() );
    root->Branch( ( name+".MuBestTrackDz" ).c_str(),                   MuBestTrackDz,                   ( name+".MuBestTrackDz["+name+".Size]/F" ).c_str() );
    root->Branch( ( name+".MuBestTrackDxy" ).c_str(),                  MuBestTrackDxy,                  ( name+".MuBestTrackDxy["+name+".Size]/F" ).c_str() );
    root->Branch( ( name+".MuBestTrackNMuonhits" ).c_str(),            MuBestTrackNMuonhits,            ( name+".MuBestTrackNMuonhits["+name+".Size]/I" ).c_str() );
    root->Branch( ( name+".MuTunePBestTrackType" ).c_str(),            MuTunePBestTrackType,            ( name+".MuTunePBestTrackType["+name+".Size]/I" ).c_str() );
    root->Branch( ( name+".MuTunePBestTrackPt" ).c_str(),              MuTunePBestTrackPt,              ( name+".MuTunePBestTrackPt["+name+".Size]/F" ).c_str() );
    root->Branch( ( name+".MuTunePBestTrackEta" ).c_str(),             MuTunePBestTrackEta,             ( name+".MuTunePBestTrackEta["+name+".Size]/F" ).c_str() );
    root->Branch( ( name+".MuTunePBestTrackPhi" ).c_str(),             MuTunePBestTrackPhi,             ( name+".MuTunePBestTrackPhi["+name+".Size]/F" ).c_str() );
    root->Branch( ( name+".MuTunePBestTrackPtError" ).c_str(),         MuTunePBestTrackPtError,         ( name+".MuTunePBestTrackPtError["+name+".Size]/F" ).c_str() );
    root->Branch( ( name+".MuTunePBestTrackDz" ).c_str(),              MuTunePBestTrackDz,              ( name+".MuTunePBestTrackDz["+name+".Size]/F" ).c_str() );
    root->Branch( ( name+".MuTunePBestTrackDxy" ).c_str(),             MuTunePBestTrackDxy,             ( name+".MuTunePBestTrackDxy["+name+".Size]/F" ).c_str() );
    root->Branch( ( name+".MuTunePBestTrackNMuonhits" ).c_str(),       MuTunePBestTrackNMuonhits,       ( name+".MuTunePBestTrackNMuonhits["+name+".Size]/I" ).c_str() );
    root->Branch( ( name+".MuontimenDof" ).c_str(),                    MuontimenDof,                    ( name+".MuontimenDof["+name+".Size]/I" ).c_str() );
    root->Branch( ( name+".MuontimeAtIpInOut" ).c_str(),               MuontimeAtIpInOut,               ( name+".MuontimeAtIpInOut["+name+".Size]/F" ).c_str() );
    root->Branch( ( name+".MuontimeAtIpOutIn" ).c_str(),               MuontimeAtIpOutIn,               ( name+".MuontimeAtIpOutIn["+name+".Size]/F" ).c_str() );
    root->Branch( ( name+".Muondirection" ).c_str(),                   Muondirection,                   ( name+".Muondirection["+name+".Size]/I" ).c_str() );
    root->Branch( ( name+".isPFElectron" ).c_str(),                    isPFElectron,                    ( name+".isPFElectron["+name+".Size]/O" ).c_str() );
    root->Branch( ( name+".ElEnergyCorrFactor" ).c_str(),              ElEnergyCorrFactor,              ( name+".ElEnergyCorrFactor["+name+".Size]/F" ).c_str() ); 
    root->Branch( ( name+".ElEnergyPreCorrErr" ).c_str(),              ElEnergyPreCorrErr,              ( name+".ElEnergyPreCorrErr["+name+".Size]/F" ).c_str() );
    root->Branch( ( name+".ElEnergyPostCorrErr" ).c_str(),             ElEnergyPostCorrErr,             ( name+".ElEnergyPostCorrErr["+name+".Size]/F" ).c_str() );
    root->Branch( ( name+".ElEnergyPostCorrScaleUp" ).c_str(),         ElEnergyPostCorrScaleUp,         ( name+".ElEnergyPostCorrScaleUp["+name+".Size]/F" ).c_str() );
    root->Branch( ( name+".ElEnergyPostCorrScaleDown" ).c_str(),       ElEnergyPostCorrScaleDown,       ( name+".ElEnergyPostCorrScaleDown["+name+".Size]/F" ).c_str() );
    root->Branch( ( name+".ElEnergyPostCorrSmearUp" ).c_str(),         ElEnergyPostCorrSmearUp,         ( name+".ElEnergyPostCorrSmearUp["+name+".Size]/F" ).c_str() );
    root->Branch( ( name+".ElEnergyPostCorrSmearDown" ).c_str(),       ElEnergyPostCorrSmearDown,       ( name+".ElEnergyPostCorrSmearDown["+name+".Size]/F" ).c_str() );
    root->Branch( ( name+".EgammaCutBasedEleIdVETO" ).c_str(),         EgammaCutBasedEleIdVETO,         ( name+".EgammaCutBasedEleIdVETO["+name+".Size]/O" ).c_str() );
    root->Branch( ( name+".EgammaCutBasedEleIdLOOSE" ).c_str(),        EgammaCutBasedEleIdLOOSE,        ( name+".EgammaCutBasedEleIdLOOSE["+name+".Size]/O" ).c_str() );
    root->Branch( ( name+".EgammaCutBasedEleIdMEDIUM" ).c_str(),       EgammaCutBasedEleIdMEDIUM,       ( name+".EgammaCutBasedEleIdMEDIUM["+name+".Size]/O" ).c_str() );
    root->Branch( ( name+".EgammaCutBasedEleIdTIGHT" ).c_str(),        EgammaCutBasedEleIdTIGHT,        ( name+".EgammaCutBasedEleIdTIGHT["+name+".Size]/O" ).c_str() );
    root->Branch( ( name+".EgammaCutBasedEleIdHEEP" ).c_str(),         EgammaCutBasedEleIdHEEP,         ( name+".EgammaCutBasedEleIdHEEP["+name+".Size]/O" ).c_str() );
    root->Branch( ( name+".EtaSC" ).c_str(),                           EtaSC,                           ( name+".EtaSC["+name+".Size]/F" ).c_str() );
    root->Branch( ( name+".PhiSC" ).c_str(),                           PhiSC,                           ( name+".PhiSC["+name+".Size]/F" ).c_str() );
    root->Branch( ( name+".rawEnergySC" ).c_str(),                     rawEnergySC,                     ( name+".rawEnergySC["+name+".Size]/F" ).c_str() );
    root->Branch( ( name+".EnergySC" ).c_str(),                        EnergySC,                        ( name+".EnergySC["+name+".Size]/F" ).c_str() );
    root->Branch( ( name+".ESEnergySC" ).c_str(),                      ESEnergySC,                      ( name+".ESEnergySC["+name+".Size]/F" ).c_str() );
    root->Branch( ( name+".R9" ).c_str(),                              R9,                              ( name+".R9["+name+".Size]/F" ).c_str() );
    root->Branch( ( name+".E1x5" ).c_str(),                            E1x5,                            ( name+".E1x5["+name+".Size]/F" ).c_str() );
    root->Branch( ( name+".E2x5Max" ).c_str(),                         E2x5Max,                         ( name+".E2x5Max["+name+".Size]/F" ).c_str() );
    root->Branch( ( name+".E5x5" ).c_str(),                            E5x5,                            ( name+".E5x5["+name+".Size]/F" ).c_str() );
    root->Branch( ( name+".SigmaIetaIeta" ).c_str(),                   SigmaIetaIeta,                   ( name+".SigmaIetaIeta["+name+".Size]/F" ).c_str() );
    root->Branch( ( name+".SigmaIetaIphi" ).c_str(),                   SigmaIetaIphi,                   ( name+".SigmaIetaIphi["+name+".Size]/F" ).c_str() );
    root->Branch( ( name+".SigmaIphiIphi" ).c_str(),                   SigmaIphiIphi,                   ( name+".SigmaIphiIphi["+name+".Size]/F" ).c_str() );
    root->Branch( ( name+".EtaWidth" ).c_str(),                        EtaWidth,                        ( name+".EtaWidth["+name+".Size]/F" ).c_str() );
    root->Branch( ( name+".PhiWidth" ).c_str(),                        PhiWidth,                        ( name+".PhiWidth["+name+".Size]/F" ).c_str() );
    root->Branch( ( name+".ElHadoverEm" ).c_str(),                     ElHadoverEm,                     ( name+".ElHadoverEm["+name+".Size]/F" ).c_str() );
    root->Branch( ( name+".HcalDepth1Iso" ).c_str(),                   HcalDepth1Iso,                   ( name+".HcalDepth1Iso["+name+".Size]/F" ).c_str() );
    root->Branch( ( name+".HcalDepth2Iso" ).c_str(),                   HcalDepth2Iso,                   ( name+".HcalDepth2Iso["+name+".Size]/F" ).c_str() );
    root->Branch( ( name+".HEEPTrackIso" ).c_str(),                    HEEPTrackIso,                    ( name+".HEEPTrackIso["+name+".Size]/F" ).c_str() );
    root->Branch( ( name+".EgammaMVANonTrig" ).c_str(),                EgammaMVANonTrig,                ( name+".EgammaMVANonTrig["+name+".Size]/F" ).c_str() );
    root->Branch( ( name+".EgammaMVATrig" ).c_str(),                   EgammaMVATrig,                   ( name+".EgammaMVATrig["+name+".Size]/F" ).c_str() );
    root->Branch( ( name+".isEcalDriven" ).c_str(),                    isEcalDriven,                    ( name+".isEcalDriven["+name+".Size]/I" ).c_str() );
    root->Branch( ( name+".isTrackerDriven" ).c_str(),                 isTrackerDriven,                 ( name+".isTrackerDriven["+name+".Size]/I" ).c_str() );
    root->Branch( ( name+".ElTightCharge" ).c_str(),                   ElTightCharge,                   ( name+".ElTightCharge["+name+".Size]/I" ).c_str() );
    root->Branch( ( name+".ElMomentum" ).c_str(),                      ElMomentum,                      ( name+".ElMomentum["+name+".Size]/F" ).c_str() );
    root->Branch( ( name+".ElMomentumErr" ).c_str(),                   ElMomentumErr,                   ( name+".ElMomentumErr["+name+".Size]/F" ).c_str() );
    root->Branch( ( name+".ElTrackPt" ).c_str(),                       ElTrackPt,                       ( name+".ElTrackPt["+name+".Size]/F" ).c_str() );
    root->Branch( ( name+".ElTrackEta" ).c_str(),                      ElTrackEta,                      ( name+".ElTrackEta["+name+".Size]/F" ).c_str() );
    root->Branch( ( name+".ElTrackPhi" ).c_str(),                      ElTrackPhi,                      ( name+".ElTrackPhi["+name+".Size]/F" ).c_str() );
    root->Branch( ( name+".ElTrackDz" ).c_str(),                       ElTrackDz,                       ( name+".ElTrackDz["+name+".Size]/F" ).c_str() );
    root->Branch( ( name+".ElTrackDxy" ).c_str(),                      ElTrackDxy,                      ( name+".ElTrackDxy["+name+".Size]/F" ).c_str() );
    root->Branch( ( name+".ElTrackNormalizedChi2" ).c_str(),           ElTrackNormalizedChi2,           ( name+".ElTrackNormalizedChi2["+name+".Size]/F" ).c_str() );
    root->Branch( ( name+".ElNTrackLayersWMeasurement" ).c_str(),      ElNTrackLayersWMeasurement,      ( name+".ElNTrackLayersWMeasurement["+name+".Size]/I" ).c_str() );
    root->Branch( ( name+".ElTrackNHits" ).c_str(),                    ElTrackNHits,                    ( name+".ElTrackNHits["+name+".Size]/I" ).c_str() );
    root->Branch( ( name+".NumberOfExpectedInnerHits" ).c_str(),       NumberOfExpectedInnerHits,       ( name+".NumberOfExpectedInnerHits["+name+".Size]/I" ).c_str() );
    root->Branch( ( name+".ElClassification" ).c_str(),                ElClassification,                ( name+".ElClassification["+name+".Size]/I" ).c_str() );
    root->Branch( ( name+".ElFBrem" ).c_str(),                         ElFBrem,                         ( name+".ElFBrem["+name+".Size]/F" ).c_str() );
    root->Branch( ( name+".ElNumberOfBrems" ).c_str(),                 ElNumberOfBrems,                 ( name+".ElNumberOfBrems["+name+".Size]/I" ).c_str() );
    root->Branch( ( name+".ElhasConv" ).c_str(),                       ElhasConv,                       ( name+".ElhasConv["+name+".Size]/O" ).c_str() );
    root->Branch( ( name+".ElEcalE" ).c_str(),                         ElEcalE,                         ( name+".ElEcalE["+name+".Size]/F" ).c_str() );
    root->Branch( ( name+".ElEnergyErr" ).c_str(),                     ElEnergyErr,                     ( name+".ElEnergyErr["+name+".Size]/F" ).c_str() );
    root->Branch( ( name+".ElEoverP" ).c_str(),                        ElEoverP,                        ( name+".ElEoverP["+name+".Size]/F" ).c_str() );
    root->Branch( ( name+".EldeltaEta" ).c_str(),                      EldeltaEta,                      ( name+".EldeltaEta["+name+".Size]/F" ).c_str() );
    root->Branch( ( name+".EldeltaPhi" ).c_str(),                      EldeltaPhi,                      ( name+".EldeltaPhi["+name+".Size]/F" ).c_str() );
    root->Branch( ( name+".EldeltaEtaSeed" ).c_str(),                  EldeltaEtaSeed,                  ( name+".EldeltaEtaSeed["+name+".Size]/F" ).c_str() );
    root->Branch( ( name+".isPFTau" ).c_str(),                         isPFTau,                         ( name+".isPFTau["+name+".Size]/I" ).c_str() );
    root->Branch( ( name+".GenPt" ).c_str(),                           GenPt,                           ( name+".GenPt["+name+".Size]/F" ).c_str() );
    root->Branch( ( name+".GenEta" ).c_str(),                          GenEta,                          ( name+".GenEta["+name+".Size]/F" ).c_str() );
    root->Branch( ( name+".GenPhi" ).c_str(),                          GenPhi,                          ( name+".GenPhi["+name+".Size]/F" ).c_str() );
    root->Branch( ( name+".GenPdgID" ).c_str(),                        GenPdgID,                        ( name+".GenPdgID["+name+".Size]/I" ).c_str() );
    root->Branch( ( name+".GenMCTag" ).c_str(),                        GenMCTag,                        ( name+".GenMCTag["+name+".Size]/I" ).c_str() );
    root->Branch( ( name+".TempPt1" ).c_str(),                         TempPt1,                         ( name+".TempPt1["+name+".Size]/F" ).c_str() );
    root->Branch( ( name+".TempEta1" ).c_str(),                        TempEta1,                        ( name+".TempEta1["+name+".Size]/F" ).c_str() );
    root->Branch( ( name+".TempPhi1" ).c_str(),                        TempPhi1,                        ( name+".TempPhi1["+name+".Size]/F" ).c_str() );
    root->Branch( ( name+".TempEnergy1" ).c_str(),                     TempEnergy1,                     ( name+".TempEnergy1["+name+".Size]/F" ).c_str() );
    root->Branch( ( name+".TempPt2" ).c_str(),                         TempPt2,                         ( name+".TempPt2["+name+".Size]/F" ).c_str() );
    root->Branch( ( name+".TempEta2" ).c_str(),                        TempEta2,                        ( name+".TempEta2["+name+".Size]/F" ).c_str() );
    root->Branch( ( name+".TempPhi2" ).c_str(),                        TempPhi2,                        ( name+".TempPhi2["+name+".Size]/F" ).c_str() );
    root->Branch( ( name+".TempEnergy2" ).c_str(),                     TempEnergy2,                     ( name+".TempEnergy2["+name+".Size]/F" ).c_str() );
    root->Branch( ( name+".TempFloat1" ).c_str(),                      TempFloat1,                      ( name+".TempFloat1["+name+".Size]/F" ).c_str() );
    root->Branch( ( name+".TempFloat2" ).c_str(),                      TempFloat2,                      ( name+".TempFloat2["+name+".Size]/F" ).c_str() );
    root->Branch( ( name+".TempFloat3" ).c_str(),                      TempFloat3,                      ( name+".TempFloat3["+name+".Size]/F" ).c_str() );
    root->Branch( ( name+".TempFloat4" ).c_str(),                      TempFloat4,                      ( name+".TempFloat4["+name+".Size]/F" ).c_str() );
  }

  void
  Register( TTree* root, const std::string& name = "LepInfo" )
  {
    root->SetBranchAddress( ( name+".Size" ).c_str(),                            &Size );
    root->SetBranchAddress( ( name+".Index" ).c_str(),                           Index );
    root->SetBranchAddress( ( name+".LeptonType" ).c_str(),                      LeptonType );
    root->SetBranchAddress( ( name+".Charge" ).c_str(),                          Charge );
    root->SetBranchAddress( ( name+".Pt" ).c_str(),                              Pt );
    root->SetBranchAddress( ( name+".Et" ).c_str(),                              Et );
    root->SetBranchAddress( ( name+".Eta" ).c_str(),                             Eta );
    root->SetBranchAddress( ( name+".Phi" ).c_str(),                             Phi );
    root->SetBranchAddress( ( name+".Px" ).c_str(),                              Px );
    root->SetBranchAddress( ( name+".Py" ).c_str(),                              Py );
    root->SetBranchAddress( ( name+".Pz" ).c_str(),                              Pz );
    root->SetBranchAddress( ( name+".Energy" ).c_str(),                          Energy );
    root->SetBranchAddress( ( name+".TrackerBasedIsoR03" ).c_str(),              TrackerBasedIsoR03 );
    root->SetBranchAddress( ( name+".EcalBasedIsoR03" ).c_str(),                 EcalBasedIsoR03 );
    root->SetBranchAddress( ( name+".HcalBasedIsoR03" ).c_str(),                 HcalBasedIsoR03 );
    root->SetBranchAddress( ( name+".ChargedHadronIsoR03" ).c_str(),             ChargedHadronIsoR03 );
    root->SetBranchAddress( ( name+".NeutralHadronIsoR03" ).c_str(),             NeutralHadronIsoR03 );
    root->SetBranchAddress( ( name+".PhotonIsoR03" ).c_str(),                    PhotonIsoR03 );
    root->SetBranchAddress( ( name+".sumPUPtR03" ).c_str(),                      sumPUPtR03 );
    root->SetBranchAddress( ( name+".PFIsoRhoCorrR03" ).c_str(),                 PFIsoRhoCorrR03 );
    root->SetBranchAddress( ( name+".ChargedHadronIsoR04" ).c_str(),             ChargedHadronIsoR04 );
    root->SetBranchAddress( ( name+".NeutralHadronIsoR04" ).c_str(),             NeutralHadronIsoR04 );
    root->SetBranchAddress( ( name+".PhotonIsoR04" ).c_str(),                    PhotonIsoR04 );
    root->SetBranchAddress( ( name+".sumPUPtR04" ).c_str(),                      sumPUPtR04 );
    root->SetBranchAddress( ( name+".PFIsoDeltaBetaCorrR04" ).c_str(),           PFIsoDeltaBetaCorrR04 );
    root->SetBranchAddress( ( name+".EcalPFIsoRhoCorr2016" ).c_str(),            EcalPFIsoRhoCorr2016 );
    root->SetBranchAddress( ( name+".HcalPFIsoRhoCorr2016" ).c_str(),            HcalPFIsoRhoCorr2016 );
    root->SetBranchAddress( ( name+".Ip3dPV" ).c_str(),                          Ip3dPV );
    root->SetBranchAddress( ( name+".Ip3dPVErr" ).c_str(),                       Ip3dPVErr );
    root->SetBranchAddress( ( name+".Ip3dPVSignificance" ).c_str(),              Ip3dPVSignificance );
    root->SetBranchAddress( ( name+".MiniIso" ).c_str(),                         MiniIso );
    root->SetBranchAddress( ( name+".MuType" ).c_str(),                          MuType );
    root->SetBranchAddress( ( name+".isPFMuon" ).c_str(),                        isPFMuon );
    root->SetBranchAddress( ( name+".MuonCutBasedMuIdLOOSE" ).c_str(),           MuonCutBasedMuIdLOOSE );
    root->SetBranchAddress( ( name+".MuonCutBasedMuIdMEDIUM" ).c_str(),          MuonCutBasedMuIdMEDIUM );
    root->SetBranchAddress( ( name+".MuonCutBasedMuIdTIGHT" ).c_str(),           MuonCutBasedMuIdTIGHT );
    root->SetBranchAddress( ( name+".MuonCutBasedIdGlobalHighPt" ).c_str(),      MuonCutBasedIdGlobalHighPt );
    root->SetBranchAddress( ( name+".MuonCutBasedIdTrkHighPt" ).c_str(),         MuonCutBasedIdTrkHighPt );
    root->SetBranchAddress( ( name+".isGoodMuonTMOneStationTight" ).c_str(),     isGoodMuonTMOneStationTight );
    root->SetBranchAddress( ( name+".isGoodMuonGlobalMuonPromptTight" ).c_str(), isGoodMuonGlobalMuonPromptTight );
    root->SetBranchAddress( ( name+".MuInnerPt" ).c_str(),                       MuInnerPt );
    root->SetBranchAddress( ( name+".MuInnerEta" ).c_str(),                      MuInnerEta );
    root->SetBranchAddress( ( name+".MuInnerPhi" ).c_str(),                      MuInnerPhi );
    root->SetBranchAddress( ( name+".MuInnerPtError" ).c_str(),                  MuInnerPtError );
    root->SetBranchAddress( ( name+".innerTracknormalizedChi2" ).c_str(),        innerTracknormalizedChi2 );
    root->SetBranchAddress( ( name+".MuInnerTrackDz" ).c_str(),                  MuInnerTrackDz );
    root->SetBranchAddress( ( name+".MuInnerTrackDxy" ).c_str(),                 MuInnerTrackDxy );
    root->SetBranchAddress( ( name+".MuInnerTrackVHitFrac" ).c_str(),            MuInnerTrackVHitFrac );
    root->SetBranchAddress( ( name+".MuInnerTrackHighPurity" ).c_str(),          MuInnerTrackHighPurity );
    root->SetBranchAddress( ( name+".MuInnerTrackNHits" ).c_str(),               MuInnerTrackNHits );
    root->SetBranchAddress( ( name+".MuNTrackerHits" ).c_str(),                  MuNTrackerHits );
    root->SetBranchAddress( ( name+".MuNPixelLayers" ).c_str(),                  MuNPixelLayers );
    root->SetBranchAddress( ( name+".MuNPixelLayersWMeasurement" ).c_str(),      MuNPixelLayersWMeasurement );
    root->SetBranchAddress( ( name+".MuNTrackLayersWMeasurement" ).c_str(),      MuNTrackLayersWMeasurement );
    root->SetBranchAddress( ( name+".MuGlobalPt" ).c_str(),                      MuGlobalPt );
    root->SetBranchAddress( ( name+".MuGlobalEta" ).c_str(),                     MuGlobalEta );
    root->SetBranchAddress( ( name+".MuGlobalPhi" ).c_str(),                     MuGlobalPhi );
    root->SetBranchAddress( ( name+".MuGlobalPtError" ).c_str(),                 MuGlobalPtError );
    root->SetBranchAddress( ( name+".MuGlobalNormalizedChi2" ).c_str(),          MuGlobalNormalizedChi2 );
    root->SetBranchAddress( ( name+".MuNMuonhits" ).c_str(),                     MuNMuonhits );
    root->SetBranchAddress( ( name+".MuDThits" ).c_str(),                        MuDThits );
    root->SetBranchAddress( ( name+".MuCSChits" ).c_str(),                       MuCSChits );
    root->SetBranchAddress( ( name+".MuRPChits" ).c_str(),                       MuRPChits );
    root->SetBranchAddress( ( name+".MuSegCompatibility" ).c_str(),              MuSegCompatibility );
    root->SetBranchAddress( ( name+".MuSTATKMatchingChi2" ).c_str(),             MuSTATKMatchingChi2 );
    root->SetBranchAddress( ( name+".MuInnerTrackKinkVal" ).c_str(),             MuInnerTrackKinkVal );
    root->SetBranchAddress( ( name+".MuStationMask" ).c_str(),                   MuStationMask );
    root->SetBranchAddress( ( name+".MuNMatchedStations" ).c_str(),              MuNMatchedStations );
    root->SetBranchAddress( ( name+".MuBestTrackType" ).c_str(),                 MuBestTrackType );
    root->SetBranchAddress( ( name+".MuBestTrackPt" ).c_str(),                   MuBestTrackPt );
    root->SetBranchAddress( ( name+".MuBestTrackEta" ).c_str(),                  MuBestTrackEta );
    root->SetBranchAddress( ( name+".MuBestTrackPhi" ).c_str(),                  MuBestTrackPhi );
    root->SetBranchAddress( ( name+".MuBestTrackPtError" ).c_str(),              MuBestTrackPtError );
    root->SetBranchAddress( ( name+".MuBestTrackDz" ).c_str(),                   MuBestTrackDz );
    root->SetBranchAddress( ( name+".MuBestTrackDxy" ).c_str(),                  MuBestTrackDxy );
    root->SetBranchAddress( ( name+".MuBestTrackNMuonhits" ).c_str(),            MuBestTrackNMuonhits );
    root->SetBranchAddress( ( name+".MuTunePBestTrackType" ).c_str(),            MuTunePBestTrackType );
    root->SetBranchAddress( ( name+".MuTunePBestTrackPt" ).c_str(),              MuTunePBestTrackPt );
    root->SetBranchAddress( ( name+".MuTunePBestTrackEta" ).c_str(),             MuTunePBestTrackEta );
    root->SetBranchAddress( ( name+".MuTunePBestTrackPhi" ).c_str(),             MuTunePBestTrackPhi );
    root->SetBranchAddress( ( name+".MuTunePBestTrackPtError" ).c_str(),         MuTunePBestTrackPtError );
    root->SetBranchAddress( ( name+".MuTunePBestTrackDz" ).c_str(),              MuTunePBestTrackDz );
    root->SetBranchAddress( ( name+".MuTunePBestTrackDxy" ).c_str(),             MuTunePBestTrackDxy );
    root->SetBranchAddress( ( name+".MuTunePBestTrackNMuonhits" ).c_str(),       MuTunePBestTrackNMuonhits );
    root->SetBranchAddress( ( name+".MuontimenDof" ).c_str(),                    MuontimenDof );
    root->SetBranchAddress( ( name+".MuontimeAtIpInOut" ).c_str(),               MuontimeAtIpInOut );
    root->SetBranchAddress( ( name+".MuontimeAtIpOutIn" ).c_str(),               MuontimeAtIpOutIn );
    root->SetBranchAddress( ( name+".Muondirection" ).c_str(),                   Muondirection );
    root->SetBranchAddress( ( name+".isPFElectron" ).c_str(),                    isPFElectron );
    root->SetBranchAddress( ( name+".ElEnergyCorrFactor" ).c_str(),              ElEnergyCorrFactor ); 
    root->SetBranchAddress( ( name+".ElEnergyPreCorrErr" ).c_str(),              ElEnergyPreCorrErr );
    root->SetBranchAddress( ( name+".ElEnergyPostCorrErr" ).c_str(),             ElEnergyPostCorrErr );
    root->SetBranchAddress( ( name+".ElEnergyPostCorrScaleUp" ).c_str(),         ElEnergyPostCorrScaleUp );
    root->SetBranchAddress( ( name+".ElEnergyPostCorrScaleDown" ).c_str(),       ElEnergyPostCorrScaleDown );
    root->SetBranchAddress( ( name+".ElEnergyPostCorrSmearUp" ).c_str(),         ElEnergyPostCorrSmearUp );
    root->SetBranchAddress( ( name+".ElEnergyPostCorrSmearDown" ).c_str(),       ElEnergyPostCorrSmearDown );
    root->SetBranchAddress( ( name+".EgammaCutBasedEleIdVETO" ).c_str(),         EgammaCutBasedEleIdVETO ); 
    root->SetBranchAddress( ( name+".EgammaCutBasedEleIdLOOSE" ).c_str(),        EgammaCutBasedEleIdLOOSE ); 
    root->SetBranchAddress( ( name+".EgammaCutBasedEleIdMEDIUM" ).c_str(),       EgammaCutBasedEleIdMEDIUM ); 
    root->SetBranchAddress( ( name+".EgammaCutBasedEleIdTIGHT" ).c_str(),        EgammaCutBasedEleIdTIGHT ); 
    root->SetBranchAddress( ( name+".EgammaCutBasedEleIdHEEP" ).c_str(),         EgammaCutBasedEleIdHEEP ); 
    root->SetBranchAddress( ( name+".EtaSC" ).c_str(),                           EtaSC ); 
    root->SetBranchAddress( ( name+".PhiSC" ).c_str(),                           PhiSC ); 
    root->SetBranchAddress( ( name+".rawEnergySC" ).c_str(),                     rawEnergySC ); 
    root->SetBranchAddress( ( name+".EnergySC" ).c_str(),                        EnergySC ); 
    root->SetBranchAddress( ( name+".ESEnergySC" ).c_str(),                      ESEnergySC ); 
    root->SetBranchAddress( ( name+".R9" ).c_str(),                              R9 ); 
    root->SetBranchAddress( ( name+".E1x5" ).c_str(),                            E1x5 ); 
    root->SetBranchAddress( ( name+".E2x5Max" ).c_str(),                         E2x5Max ); 
    root->SetBranchAddress( ( name+".E5x5" ).c_str(),                            E5x5 ); 
    root->SetBranchAddress( ( name+".SigmaIetaIeta" ).c_str(),                   SigmaIetaIeta ); 
    root->SetBranchAddress( ( name+".SigmaIetaIphi" ).c_str(),                   SigmaIetaIphi ); 
    root->SetBranchAddress( ( name+".SigmaIphiIphi" ).c_str(),                   SigmaIphiIphi ); 
    root->SetBranchAddress( ( name+".EtaWidth" ).c_str(),                        EtaWidth ); 
    root->SetBranchAddress( ( name+".PhiWidth" ).c_str(),                        PhiWidth ); 
    root->SetBranchAddress( ( name+".ElHadoverEm" ).c_str(),                     ElHadoverEm ); 
    root->SetBranchAddress( ( name+".HcalDepth1Iso" ).c_str(),                   HcalDepth1Iso ); 
    root->SetBranchAddress( ( name+".HcalDepth2Iso" ).c_str(),                   HcalDepth2Iso ); 
    root->SetBranchAddress( ( name+".HEEPTrackIso" ).c_str(),                    HEEPTrackIso ); 
    root->SetBranchAddress( ( name+".EgammaMVANonTrig" ).c_str(),                EgammaMVANonTrig ); 
    root->SetBranchAddress( ( name+".EgammaMVATrig" ).c_str(),                   EgammaMVATrig ); 
    root->SetBranchAddress( ( name+".isEcalDriven" ).c_str(),                    isEcalDriven ); 
    root->SetBranchAddress( ( name+".isTrackerDriven" ).c_str(),                 isTrackerDriven ); 
    root->SetBranchAddress( ( name+".ElTightCharge" ).c_str(),                   ElTightCharge ); 
    root->SetBranchAddress( ( name+".ElMomentum" ).c_str(),                      ElMomentum ); 
    root->SetBranchAddress( ( name+".ElMomentumErr" ).c_str(),                   ElMomentumErr ); 
    root->SetBranchAddress( ( name+".ElTrackPt" ).c_str(),                       ElTrackPt ); 
    root->SetBranchAddress( ( name+".ElTrackEta" ).c_str(),                      ElTrackEta ); 
    root->SetBranchAddress( ( name+".ElTrackPhi" ).c_str(),                      ElTrackPhi ); 
    root->SetBranchAddress( ( name+".ElTrackDz" ).c_str(),                       ElTrackDz ); 
    root->SetBranchAddress( ( name+".ElTrackDxy" ).c_str(),                      ElTrackDxy ); 
    root->SetBranchAddress( ( name+".ElTrackNormalizedChi2" ).c_str(),           ElTrackNormalizedChi2 ); 
    root->SetBranchAddress( ( name+".ElNTrackLayersWMeasurement" ).c_str(),      ElNTrackLayersWMeasurement ); 
    root->SetBranchAddress( ( name+".ElTrackNHits" ).c_str(),                    ElTrackNHits ); 
    root->SetBranchAddress( ( name+".NumberOfExpectedInnerHits" ).c_str(),       NumberOfExpectedInnerHits ); 
    root->SetBranchAddress( ( name+".ElClassification" ).c_str(),                ElClassification ); 
    root->SetBranchAddress( ( name+".ElFBrem" ).c_str(),                         ElFBrem ); 
    root->SetBranchAddress( ( name+".ElNumberOfBrems" ).c_str(),                 ElNumberOfBrems ); 
    root->SetBranchAddress( ( name+".ElhasConv" ).c_str(),                       ElhasConv ); 
    root->SetBranchAddress( ( name+".ElEcalE" ).c_str(),                         ElEcalE ); 
    root->SetBranchAddress( ( name+".ElEnergyErr" ).c_str(),                     ElEnergyErr ); 
    root->SetBranchAddress( ( name+".ElEoverP" ).c_str(),                        ElEoverP ); 
    root->SetBranchAddress( ( name+".EldeltaEta" ).c_str(),                      EldeltaEta ); 
    root->SetBranchAddress( ( name+".EldeltaPhi" ).c_str(),                      EldeltaPhi ); 
    root->SetBranchAddress( ( name+".EldeltaEtaSeed" ).c_str(),                  EldeltaEtaSeed ); 
    root->SetBranchAddress( ( name+".isPFTau" ).c_str(),                         isPFTau );
    root->SetBranchAddress( ( name+".GenPt" ).c_str(),                           GenPt );
    root->SetBranchAddress( ( name+".GenEta" ).c_str(),                          GenEta );
    root->SetBranchAddress( ( name+".GenPhi" ).c_str(),                          GenPhi );
    root->SetBranchAddress( ( name+".GenPdgID" ).c_str(),                        GenPdgID );
    root->SetBranchAddress( ( name+".GenMCTag" ).c_str(),                        GenMCTag );
    root->SetBranchAddress( ( name+".TempPt1" ).c_str(),                         TempPt1 );
    root->SetBranchAddress( ( name+".TempEta1" ).c_str(),                        TempEta1 );
    root->SetBranchAddress( ( name+".TempPhi1" ).c_str(),                        TempPhi1 );
    root->SetBranchAddress( ( name+".TempEnergy1" ).c_str(),                     TempEnergy1 );
    root->SetBranchAddress( ( name+".TempPt2" ).c_str(),                         TempPt2 );
    root->SetBranchAddress( ( name+".TempEta2" ).c_str(),                        TempEta2 );
    root->SetBranchAddress( ( name+".TempPhi2" ).c_str(),                        TempPhi2 );
    root->SetBranchAddress( ( name+".TempEnergy2" ).c_str(),                     TempEnergy2 );
    root->SetBranchAddress( ( name+".TempFloat1" ).c_str(),                      TempFloat1 );
    root->SetBranchAddress( ( name+".TempFloat2" ).c_str(),                      TempFloat2 );
    root->SetBranchAddress( ( name+".TempFloat3" ).c_str(),                      TempFloat3 );
    root->SetBranchAddress( ( name+".TempFloat4" ).c_str(),                      TempFloat4 );
  }
};

class PhotonInfoBranches
{
public:
  Int_t Size;
  Float_t Pt [MAX_PHOTONS];
  Float_t Eta [MAX_PHOTONS];
  Float_t Phi [MAX_PHOTONS];
  Float_t Px [MAX_PHOTONS];
  Float_t Py [MAX_PHOTONS];
  Float_t Pz [MAX_PHOTONS];
  Float_t Energy [MAX_PHOTONS];
  Bool_t isPFPhoton [MAX_PHOTONS];
  Float_t PhoEnergyCorrFactor [MAX_PHOTONS]; 
  Float_t PhoEnergyPreCorrErr [MAX_PHOTONS];
  Float_t PhoEnergyPostCorrErr [MAX_PHOTONS];
  Float_t PhoEnergyPostCorrScaleUp [MAX_PHOTONS];
  Float_t PhoEnergyPostCorrScaleDown [MAX_PHOTONS];
  Float_t PhoEnergyPostCorrSmearUp [MAX_PHOTONS];
  Float_t PhoEnergyPostCorrSmearDown [MAX_PHOTONS];
  Bool_t EgammaCutBasedPhoIdLOOSE [MAX_PHOTONS];  
  Bool_t EgammaCutBasedPhoIdMEDIUM [MAX_PHOTONS];
  Bool_t EgammaCutBasedPhoIdTIGHT [MAX_PHOTONS];
  Float_t EgammaPhoIdMVA [MAX_PHOTONS];
  Float_t ChargedHadronIsoR03 [MAX_PHOTONS];
  Float_t NeutralHadronIsoR03 [MAX_PHOTONS];
  Float_t PhotonIsoR03 [MAX_PHOTONS];
  Float_t WorstChargedIsolationR03 [MAX_PHOTONS];
  Float_t PFChIsoRhoCorr [MAX_PHOTONS];
  Float_t PFNeuIsoRhoCorr [MAX_PHOTONS];
  Float_t PFPhoIsoRhoCorr [MAX_PHOTONS];
  Bool_t passelectronveto [MAX_PHOTONS];
  Bool_t hasPixelSeed [MAX_PHOTONS];
  Float_t EtaSC [MAX_PHOTONS];
  Float_t PhiSC [MAX_PHOTONS];
  Float_t rawEnergySC [MAX_PHOTONS];
  Float_t ESEnergySC [MAX_PHOTONS];
  Float_t EnergySC [MAX_PHOTONS];
  Float_t E5x5 [MAX_PHOTONS];
  Float_t R9 [MAX_PHOTONS];
  Float_t SigmaIetaIeta [MAX_PHOTONS];
  Float_t SigmaIetaIphi [MAX_PHOTONS];
  Float_t SigmaIphiIphi [MAX_PHOTONS];
  Float_t S4 [MAX_PHOTONS];
  Float_t ESEffSigmaRR [MAX_PHOTONS];
  Float_t EtaWidth [MAX_PHOTONS];
  Float_t PhiWidth [MAX_PHOTONS];
  Float_t HoverE [MAX_PHOTONS];
  Float_t hadTowOverEm [MAX_PHOTONS];
  Float_t GenPt [MAX_PHOTONS];
  Float_t GenEta [MAX_PHOTONS];
  Float_t GenPhi [MAX_PHOTONS];
  Int_t GenPdgID [MAX_PHOTONS];
  Float_t TempPt1 [MAX_PHOTONS];
  Float_t TempEta1 [MAX_PHOTONS];
  Float_t TempPhi1 [MAX_PHOTONS];
  Float_t TempEnergy1 [MAX_PHOTONS];
  Float_t TempPt2 [MAX_PHOTONS];
  Float_t TempEta2 [MAX_PHOTONS];
  Float_t TempPhi2 [MAX_PHOTONS];
  Float_t TempEnergy2 [MAX_PHOTONS];
  Float_t TempFloat1 [MAX_PHOTONS];
  Float_t TempFloat2 [MAX_PHOTONS];
  Float_t TempFloat3 [MAX_PHOTONS];
  Float_t TempFloat4 [MAX_PHOTONS];

  void
  RegisterTree( TTree* root, const std::string& name = "PhotonInfo" )
  {
    root->Branch( ( name+".Size" ).c_str(),                        &Size,                      ( name+"Size/I" ).c_str() );
    root->Branch( ( name+".Pt" ).c_str(),                          Pt,                         ( name+".Pt["+name+".Size]/F" ).c_str() );
    root->Branch( ( name+".Eta" ).c_str(),                         Eta,                        ( name+".Eta["+name+".Size]/F" ).c_str() );
    root->Branch( ( name+".Phi" ).c_str(),                         Phi,                        ( name+".Phi["+name+".Size]/F" ).c_str() );
    root->Branch( ( name+".Px" ).c_str(),                          Px,                         ( name+".Px["+name+".Size]/F" ).c_str() );
    root->Branch( ( name+".Py" ).c_str(),                          Py,                         ( name+".Py["+name+".Size]/F" ).c_str() );
    root->Branch( ( name+".Pz" ).c_str(),                          Pz,                         ( name+".Pz["+name+".Size]/F" ).c_str() );
    root->Branch( ( name+".Energy" ).c_str(),                      Energy,                     ( name+".Energy["+name+".Size]/F" ).c_str() );
    root->Branch( ( name+".isPFPhoton" ).c_str(),                  isPFPhoton,                 ( name+".isPFPhoton["+name+".Size]/O" ).c_str() );
    root->Branch( ( name+".PhoEnergyCorrFactor" ).c_str(),         PhoEnergyCorrFactor,        ( name+".PhoEnergyCorrFactor["+name+".Size]/F" ).c_str() );
    root->Branch( ( name+".PhoEnergyPreCorrErr" ).c_str(),         PhoEnergyPreCorrErr,        ( name+".PhoEnergyPreCorrErr["+name+".Size]/F" ).c_str() );
    root->Branch( ( name+".PhoEnergyPostCorrErr" ).c_str(),        PhoEnergyPostCorrErr,       ( name+".PhoEnergyPostCorrErr["+name+".Size]/F" ).c_str() );
    root->Branch( ( name+".PhoEnergyPostCorrScaleUp" ).c_str(),    PhoEnergyPostCorrScaleUp,   ( name+".PhoEnergyPostCorrScaleUp["+name+".Size]/F" ).c_str() );
    root->Branch( ( name+".PhoEnergyPostCorrScaleDown" ).c_str(),  PhoEnergyPostCorrScaleDown, ( name+".PhoEnergyPostCorrScaleDown["+name+".Size]/F" ).c_str() );
    root->Branch( ( name+".PhoEnergyPostCorrSmearUp" ).c_str(),    PhoEnergyPostCorrSmearUp,   ( name+".PhoEnergyPostCorrSmearUp["+name+".Size]/F" ).c_str() );
    root->Branch( ( name+".PhoEnergyPostCorrSmearDown" ).c_str(),  PhoEnergyPostCorrSmearDown, ( name+".PhoEnergyPostCorrSmearDown["+name+".Size]/F" ).c_str() );
    root->Branch( ( name+".EgammaCutBasedPhoIdLOOSE" ).c_str(),    EgammaCutBasedPhoIdLOOSE,   ( name+".EgammaCutBasedPhoIdLOOSE["+name+".Size]/O" ).c_str() );
    root->Branch( ( name+".EgammaCutBasedPhoIdMEDIUM" ).c_str(),   EgammaCutBasedPhoIdMEDIUM,  ( name+".EgammaCutBasedPhoIdMEDIUM["+name+".Size]/O" ).c_str() );
    root->Branch( ( name+".EgammaCutBasedPhoIdTIGHT" ).c_str(),    EgammaCutBasedPhoIdTIGHT,   ( name+".EgammaCutBasedPhoIdTIGHT["+name+".Size]/O" ).c_str() );
    root->Branch( ( name+".EgammaPhoIdMVA" ).c_str(),              EgammaPhoIdMVA,             ( name+".EgammaPhoIdMVA["+name+".Size]/F" ).c_str() );
    root->Branch( ( name+".ChargedHadronIsoR03" ).c_str(),         ChargedHadronIsoR03,        ( name+".ChargedHadronIsoR03["+name+".Size]/F" ).c_str() );
    root->Branch( ( name+".NeutralHadronIsoR03" ).c_str(),         NeutralHadronIsoR03,        ( name+".NeutralHadronIsoR03["+name+".Size]/F" ).c_str() );
    root->Branch( ( name+".PhotonIsoR03" ).c_str(),                PhotonIsoR03,               ( name+".PhotonIsoR03["+name+".Size]/F" ).c_str() );
    root->Branch( ( name+".WorstChargedIsolationR03" ).c_str(),    WorstChargedIsolationR03,   ( name+".WorstChargedIsolationR03["+name+".Size]/F" ).c_str() );
    root->Branch( ( name+".PFChIsoRhoCorr" ).c_str(),              PFChIsoRhoCorr,             ( name+".PFChIsoRhoCorr["+name+".Size]/F" ).c_str() );
    root->Branch( ( name+".PFNeuIsoRhoCorr" ).c_str(),             PFNeuIsoRhoCorr,            ( name+".PFNeuIsoRhoCorr["+name+".Size]/F" ).c_str() );
    root->Branch( ( name+".PFPhoIsoRhoCorr" ).c_str(),             PFPhoIsoRhoCorr,            ( name+".PFPhoIsoRhoCorr["+name+".Size]/F" ).c_str() );
    root->Branch( ( name+".passelectronveto" ).c_str(),            passelectronveto,           ( name+".passelectronveto["+name+".Size]/O" ).c_str() );
    root->Branch( ( name+".hasPixelSeed" ).c_str(),                hasPixelSeed,               ( name+".hasPixelSeed["+name+".Size]/O" ).c_str() );
    root->Branch( ( name+".EtaSC" ).c_str(),                       EtaSC,                      ( name+".EtaSC["+name+".Size]/F" ).c_str() );
    root->Branch( ( name+".PhiSC" ).c_str(),                       PhiSC,                      ( name+".PhiSC["+name+".Size]/F" ).c_str() );
    root->Branch( ( name+".rawEnergySC" ).c_str(),                 rawEnergySC,                ( name+".rawEnergySC["+name+".Size]/F" ).c_str() );
    root->Branch( ( name+".ESEnergySC" ).c_str(),                  ESEnergySC,                 ( name+".ESEnergySC["+name+".Size]/F" ).c_str() );
    root->Branch( ( name+".EnergySC" ).c_str(),                    EnergySC,                   ( name+".EnergySC["+name+".Size]/F" ).c_str() );
    root->Branch( ( name+".E5x5" ).c_str(),                        E5x5,                       ( name+".E5x5["+name+".Size]/F" ).c_str() );
    root->Branch( ( name+".R9" ).c_str(),                          R9,                         ( name+".R9["+name+".Size]/F" ).c_str() );
    root->Branch( ( name+".SigmaIetaIeta" ).c_str(),               SigmaIetaIeta,              ( name+".SigmaIetaIeta["+name+".Size]/F" ).c_str() );
    root->Branch( ( name+".SigmaIetaIphi" ).c_str(),               SigmaIetaIphi,              ( name+".SigmaIetaIphi["+name+".Size]/F" ).c_str() );
    root->Branch( ( name+".SigmaIphiIphi" ).c_str(),               SigmaIphiIphi,              ( name+".SigmaIphiIphi["+name+".Size]/F" ).c_str() );
    root->Branch( ( name+".S4" ).c_str(),                          S4,                         ( name+".S4["+name+".Size]/F" ).c_str() );
    root->Branch( ( name+".ESEffSigmaRR" ).c_str(),                ESEffSigmaRR,               ( name+".ESEffSigmaRR["+name+".Size]/F" ).c_str() );
    root->Branch( ( name+".EtaWidth" ).c_str(),                    EtaWidth,                   ( name+".EtaWidth["+name+".Size]/F" ).c_str() );
    root->Branch( ( name+".PhiWidth" ).c_str(),                    PhiWidth,                   ( name+".PhiWidth["+name+".Size]/F" ).c_str() );
    root->Branch( ( name+".HoverE" ).c_str(),                      HoverE,                     ( name+".HoverE["+name+".Size]/F" ).c_str() );
    root->Branch( ( name+".hadTowOverEm" ).c_str(),                hadTowOverEm,               ( name+".hadTowOverEm["+name+".Size]/F" ).c_str() );
    root->Branch( ( name+".GenPt" ).c_str(),                       GenPt,                      ( name+".GenPt["+name+".Size]/F" ).c_str() );
    root->Branch( ( name+".GenEta" ).c_str(),                      GenEta,                     ( name+".GenEta["+name+".Size]/F" ).c_str() );
    root->Branch( ( name+".GenPhi" ).c_str(),                      GenPhi,                     ( name+".GenPhi["+name+".Size]/F" ).c_str() );
    root->Branch( ( name+".GenPdgID" ).c_str(),                    GenPdgID,                   ( name+".GenPdgID["+name+".Size]/I" ).c_str() );
    root->Branch( ( name+".TempPt1" ).c_str(),                     TempPt1,                    ( name+".TempPt1["+name+".Size]/F" ).c_str() );
    root->Branch( ( name+".TempEta1" ).c_str(),                    TempEta1,                   ( name+".TempEta1["+name+".Size]/F" ).c_str() );
    root->Branch( ( name+".TempPhi1" ).c_str(),                    TempPhi1,                   ( name+".TempPhi1["+name+".Size]/F" ).c_str() );
    root->Branch( ( name+".TempEnergy1" ).c_str(),                 TempEnergy1,                ( name+".TempEnergy1["+name+".Size]/F" ).c_str() );
    root->Branch( ( name+".TempPt2" ).c_str(),                     TempPt2,                    ( name+".TempPt2["+name+".Size]/F" ).c_str() );
    root->Branch( ( name+".TempEta2" ).c_str(),                    TempEta2,                   ( name+".TempEta2["+name+".Size]/F" ).c_str() );
    root->Branch( ( name+".TempPhi2" ).c_str(),                    TempPhi2,                   ( name+".TempPhi2["+name+".Size]/F" ).c_str() );
    root->Branch( ( name+".TempEnergy2" ).c_str(),                 TempEnergy2,                ( name+".TempEnergy2["+name+".Size]/F" ).c_str() );
    root->Branch( ( name+".TempFloat1" ).c_str(),                  TempFloat1,                 ( name+".TempFloat1["+name+".Size]/F" ).c_str() );
    root->Branch( ( name+".TempFloat2" ).c_str(),                  TempFloat2,                 ( name+".TempFloat2["+name+".Size]/F" ).c_str() );
    root->Branch( ( name+".TempFloat3" ).c_str(),                  TempFloat3,                 ( name+".TempFloat3["+name+".Size]/F" ).c_str() );
    root->Branch( ( name+".TempFloat4" ).c_str(),                  TempFloat4,                 ( name+".TempFloat4["+name+".Size]/F" ).c_str() );
  }

  void
  Register( TTree* root, const std::string& name = "PhotonInfo" )
  {
    root->SetBranchAddress( ( name+".Size" ).c_str(),                          &Size ); 
    root->SetBranchAddress( ( name+".Pt" ).c_str(),                            Pt ); 
    root->SetBranchAddress( ( name+".Eta" ).c_str(),                           Eta ); 
    root->SetBranchAddress( ( name+".Phi" ).c_str(),                           Phi ); 
    root->SetBranchAddress( ( name+".Px" ).c_str(),                            Px ); 
    root->SetBranchAddress( ( name+".Py" ).c_str(),                            Py ); 
    root->SetBranchAddress( ( name+".Pz" ).c_str(),                            Pz ); 
    root->SetBranchAddress( ( name+".Energy" ).c_str(),                        Energy ); 
    root->SetBranchAddress( ( name+".isPFPhoton" ).c_str(),                    isPFPhoton ); 
    root->SetBranchAddress( ( name+".PhoEnergyCorrFactor" ).c_str(),           PhoEnergyCorrFactor ); 
    root->SetBranchAddress( ( name+".PhoEnergyPreCorrErr" ).c_str(),           PhoEnergyPreCorrErr ); 
    root->SetBranchAddress( ( name+".PhoEnergyPostCorrErr" ).c_str(),          PhoEnergyPostCorrErr ); 
    root->SetBranchAddress( ( name+".PhoEnergyPostCorrScaleUp" ).c_str(),      PhoEnergyPostCorrScaleUp ); 
    root->SetBranchAddress( ( name+".PhoEnergyPostCorrScaleDown" ).c_str(),    PhoEnergyPostCorrScaleDown ); 
    root->SetBranchAddress( ( name+".PhoEnergyPostCorrSmearUp" ).c_str(),      PhoEnergyPostCorrSmearUp ); 
    root->SetBranchAddress( ( name+".PhoEnergyPostCorrSmearDown" ).c_str(),    PhoEnergyPostCorrSmearDown );
    root->SetBranchAddress( ( name+".EgammaCutBasedPhoIdLOOSE" ).c_str(),      EgammaCutBasedPhoIdLOOSE ); 
    root->SetBranchAddress( ( name+".EgammaCutBasedPhoIdMEDIUM" ).c_str(),     EgammaCutBasedPhoIdMEDIUM ); 
    root->SetBranchAddress( ( name+".EgammaCutBasedPhoIdTIGHT" ).c_str(),      EgammaCutBasedPhoIdTIGHT ); 
    root->SetBranchAddress( ( name+".EgammaPhoIdMVA" ).c_str(),                EgammaPhoIdMVA ); 
    root->SetBranchAddress( ( name+".ChargedHadronIsoR03" ).c_str(),           ChargedHadronIsoR03 ); 
    root->SetBranchAddress( ( name+".NeutralHadronIsoR03" ).c_str(),           NeutralHadronIsoR03 ); 
    root->SetBranchAddress( ( name+".PhotonIsoR03" ).c_str(),                  PhotonIsoR03 ); 
    root->SetBranchAddress( ( name+".WorstChargedIsolationR03" ).c_str(),      WorstChargedIsolationR03 ); 
    root->SetBranchAddress( ( name+".PFChIsoRhoCorr" ).c_str(),                PFChIsoRhoCorr ); 
    root->SetBranchAddress( ( name+".PFNeuIsoRhoCorr" ).c_str(),               PFNeuIsoRhoCorr ); 
    root->SetBranchAddress( ( name+".PFPhoIsoRhoCorr" ).c_str(),               PFPhoIsoRhoCorr ); 
    root->SetBranchAddress( ( name+".passelectronveto" ).c_str(),              passelectronveto ); 
    root->SetBranchAddress( ( name+".hasPixelSeed" ).c_str(),                  hasPixelSeed ); 
    root->SetBranchAddress( ( name+".EtaSC" ).c_str(),                         EtaSC ); 
    root->SetBranchAddress( ( name+".PhiSC" ).c_str(),                         PhiSC ); 
    root->SetBranchAddress( ( name+".rawEnergySC" ).c_str(),                   rawEnergySC ); 
    root->SetBranchAddress( ( name+".ESEnergySC" ).c_str(),                    ESEnergySC ); 
    root->SetBranchAddress( ( name+".EnergySC" ).c_str(),                      EnergySC ); 
    root->SetBranchAddress( ( name+".E5x5" ).c_str(),                          E5x5 ); 
    root->SetBranchAddress( ( name+".R9" ).c_str(),                            R9 ); 
    root->SetBranchAddress( ( name+".SigmaIetaIeta" ).c_str(),                 SigmaIetaIeta ); 
    root->SetBranchAddress( ( name+".SigmaIetaIphi" ).c_str(),                 SigmaIetaIphi ); 
    root->SetBranchAddress( ( name+".SigmaIphiIphi" ).c_str(),                 SigmaIphiIphi ); 
    root->SetBranchAddress( ( name+".S4" ).c_str(),                            S4 ); 
    root->SetBranchAddress( ( name+".ESEffSigmaRR" ).c_str(),                  ESEffSigmaRR ); 
    root->SetBranchAddress( ( name+".EtaWidth" ).c_str(),                      EtaWidth ); 
    root->SetBranchAddress( ( name+".PhiWidth" ).c_str(),                      PhiWidth ); 
    root->SetBranchAddress( ( name+".HoverE" ).c_str(),                        HoverE ); 
    root->SetBranchAddress( ( name+".hadTowOverEm" ).c_str(),                  hadTowOverEm ); 
    root->SetBranchAddress( ( name+".GenPt" ).c_str(),                         GenPt );
    root->SetBranchAddress( ( name+".GenEta" ).c_str(),                        GenEta );
    root->SetBranchAddress( ( name+".GenPhi" ).c_str(),                        GenPhi );
    root->SetBranchAddress( ( name+".GenPdgID" ).c_str(),                      GenPdgID );
    root->SetBranchAddress( ( name+".TempPt1" ).c_str(),                       TempPt1 );
    root->SetBranchAddress( ( name+".TempEta1" ).c_str(),                      TempEta1 );
    root->SetBranchAddress( ( name+".TempPhi1" ).c_str(),                      TempPhi1 );
    root->SetBranchAddress( ( name+".TempEnergy1" ).c_str(),                   TempEnergy1 );
    root->SetBranchAddress( ( name+".TempPt2" ).c_str(),                       TempPt2 );
    root->SetBranchAddress( ( name+".TempEta2" ).c_str(),                      TempEta2 );
    root->SetBranchAddress( ( name+".TempPhi2" ).c_str(),                      TempPhi2 );
    root->SetBranchAddress( ( name+".TempEnergy2" ).c_str(),                   TempEnergy2 );
    root->SetBranchAddress( ( name+".TempFloat1" ).c_str(),                    TempFloat1 );
    root->SetBranchAddress( ( name+".TempFloat2" ).c_str(),                    TempFloat2 );
    root->SetBranchAddress( ( name+".TempFloat3" ).c_str(),                    TempFloat3 );
    root->SetBranchAddress( ( name+".TempFloat4" ).c_str(),                    TempFloat4 );
  }
};

class TrgInfoBranches
{
public:
  Int_t Size;
  Int_t TriggerBit [MAX_TRGOBJS];
  Int_t FilterLabel [MAX_TRGOBJS];
  Float_t Pt [MAX_TRGOBJS];
  Float_t Eta [MAX_TRGOBJS];
  Float_t Phi [MAX_TRGOBJS];
  Float_t Energy [MAX_TRGOBJS];
  Int_t TrgCount;
  Int_t nTrgBook;
  Char_t TrgBook [N_TRIGGER_BOOKINGS];
  Int_t nHLT;
  Float_t HighPurityFraction;
  Int_t NofTracks;
  Int_t HLTPrescaleFactor [512];
  Int_t HLTName2enum [512];
  Bool_t HLTbits [N_TRIGGER_BOOKINGS];
  Int_t L1 [128];
  Int_t TT [64];

  void
  RegisterTree( TTree* root, const std::string& name = "TrgInfo" )
  {
    root->Branch( ( name+".Size" ).c_str(),               &Size,               ( name+"Size/I" ).c_str() );
    root->Branch( ( name+".TriggerBit" ).c_str(),         TriggerBit,          ( name+".TriggerBit["+name+".Size]/I" ).c_str() );
    root->Branch( ( name+".FilterLabel" ).c_str(),        FilterLabel,         ( name+".FilterLabel["+name+".Size]/I" ).c_str() );
    root->Branch( ( name+".Pt" ).c_str(),                 Pt,                  ( name+".Pt["+name+".Size]/F" ).c_str() );
    root->Branch( ( name+".Eta" ).c_str(),                Eta,                 ( name+".Eta["+name+".Size]/F" ).c_str() );
    root->Branch( ( name+".Phi" ).c_str(),                Phi,                 ( name+".Phi["+name+".Size]/F" ).c_str() );
    root->Branch( ( name+".Energy" ).c_str(),             Energy,              ( name+".Energy["+name+".Size]/F" ).c_str() );
    root->Branch( ( name+".TrgCount" ).c_str(),           &TrgCount,           ( name+"TrgCount/I" ).c_str() );
    root->Branch( ( name+".nTrgBook" ).c_str(),           &nTrgBook,           ( name+"nTrgBook/I" ).c_str() );
    root->Branch( ( name+".TrgBook" ).c_str(),            TrgBook,             ( name+".TrgBook["+name+".nTrgBook]/C" ).c_str() );
    root->Branch( ( name+".nHLT" ).c_str(),               &nHLT,               ( name+"nHLT/I" ).c_str() );
    root->Branch( ( name+".HighPurityFraction" ).c_str(), &HighPurityFraction, ( name+"HighPurityFraction/F" ).c_str() );
    root->Branch( ( name+".NofTracks" ).c_str(),          &NofTracks,          ( name+"NofTracks/I" ).c_str() );
    root->Branch( ( name+".HLTPrescaleFactor" ).c_str(),  HLTPrescaleFactor,   ( name+".HLTPrescaleFactor["+name+".nHLT]/I" ).c_str() );
    root->Branch( ( name+".HLTName2enum" ).c_str(),       HLTName2enum,        ( name+".HLTName2enum["+name+".nHLT]/I" ).c_str() );
    root->Branch( ( name+".HLTbits" ).c_str(),            HLTbits,             ( name+".HLTbits["+name+".nHLT]/O" ).c_str() );
    root->Branch( ( name+".L1" ).c_str(),                 L1,                  ( name+".L1[128]/I" ).c_str() );
    root->Branch( ( name+".TT" ).c_str(),                 TT,                  ( name+".TT[64]/I" ).c_str() );
  }

  void
  Register( TTree* root, const std::string& name = "TrgInfo" )
  {
    root->SetBranchAddress( ( name+".Size" ).c_str(),               &Size );
    root->SetBranchAddress( ( name+".TriggerBit" ).c_str(),         TriggerBit );
    root->SetBranchAddress( ( name+".FilterLabel" ).c_str(),        FilterLabel );
    root->SetBranchAddress( ( name+".Pt" ).c_str(),                 Pt );
    root->SetBranchAddress( ( name+".Eta" ).c_str(),                Eta );
    root->SetBranchAddress( ( name+".Phi" ).c_str(),                Phi );
    root->SetBranchAddress( ( name+".Energy" ).c_str(),             Energy );
    root->SetBranchAddress( ( name+".TrgCount" ).c_str(),           &TrgCount );
    root->SetBranchAddress( ( name+".nTrgBook" ).c_str(),           &nTrgBook );
    root->SetBranchAddress( ( name+".TrgBook" ).c_str(),            TrgBook );
    root->SetBranchAddress( ( name+".nHLT" ).c_str(),               &nHLT );
    root->SetBranchAddress( ( name+".HighPurityFraction" ).c_str(), &HighPurityFraction );
    root->SetBranchAddress( ( name+".NofTracks" ).c_str(),          &NofTracks );
    root->SetBranchAddress( ( name+".HLTPrescaleFactor" ).c_str(),  HLTPrescaleFactor );
    root->SetBranchAddress( ( name+".HLTName2enum" ).c_str(),       HLTName2enum );
    root->SetBranchAddress( ( name+".HLTbits" ).c_str(),            HLTbits );
    root->SetBranchAddress( ( name+".L1" ).c_str(),                 L1 );
    root->SetBranchAddress( ( name+".TT" ).c_str(),                 TT );
  }
};

class VertexInfoBranches
{
public:
  Int_t Size;
  Int_t isValid [MAX_Vertices];
  Bool_t isFake [MAX_Vertices];
  Float_t Ndof [MAX_Vertices];
  Float_t NormalizedChi2 [MAX_Vertices];
  Float_t x [MAX_Vertices];
  Float_t y [MAX_Vertices];
  Float_t z [MAX_Vertices];
  Float_t Rho [MAX_Vertices];

  void
  RegisterTree( TTree* root, const std::string& name = "VertexInfo" )
  {
    root->Branch( ( name+".Size" ).c_str(),           &Size,          ( name+"Size/I" ).c_str() );
    root->Branch( ( name+".isValid" ).c_str(),        isValid,        ( name+".isValid["+name+".Size]/I" ).c_str() );
    root->Branch( ( name+".isFake" ).c_str(),         isFake,         ( name+".isFake["+name+".Size]/O" ).c_str() );
    root->Branch( ( name+".Ndof" ).c_str(),           Ndof,           ( name+".Ndof["+name+".Size]/F" ).c_str() );
    root->Branch( ( name+".NormalizedChi2" ).c_str(), NormalizedChi2, ( name+".NormalizedChi2["+name+".Size]/F" ).c_str() );
    root->Branch( ( name+".x" ).c_str(),              x,              ( name+".x["+name+".Size]/F" ).c_str() );
    root->Branch( ( name+".y" ).c_str(),              y,              ( name+".y["+name+".Size]/F" ).c_str() );
    root->Branch( ( name+".z" ).c_str(),              z,              ( name+".z["+name+".Size]/F" ).c_str() );
    root->Branch( ( name+".Rho" ).c_str(),            Rho,            ( name+".Rho["+name+".Size]/F" ).c_str() );
  }

  void
  Register( TTree* root, const std::string& name = "VertexInfo" )
  {
    root->SetBranchAddress( ( name+".Size" ).c_str(),           &Size );
    root->SetBranchAddress( ( name+".isValid" ).c_str(),        isValid );
    root->SetBranchAddress( ( name+".isFake" ).c_str(),         isFake );
    root->SetBranchAddress( ( name+".Ndof" ).c_str(),           Ndof );
    root->SetBranchAddress( ( name+".NormalizedChi2" ).c_str(), NormalizedChi2 );
    root->SetBranchAddress( ( name+".x" ).c_str(),              x );
    root->SetBranchAddress( ( name+".y" ).c_str(),              y );
    root->SetBranchAddress( ( name+".z" ).c_str(),              z );
    root->SetBranchAddress( ( name+".Rho" ).c_str(),            Rho );
  }
};

class RunInfoBranches
{
public:
  Int_t PdfID;

  void
  RegisterTree( TTree* root, const std::string& name = "RunInfo" )
  {
    root->Branch( ( name+".PdfID" ).c_str(), &PdfID, ( name+"PdfID/I" ).c_str() );
  }

  void
  Register( TTree* root, const std::string& name = "RunInfo" )
  {
    root->SetBranchAddress( ( name+".PdfID" ).c_str(), &PdfID );
  }
};


#endif// __BPRIMEKIT_FORMAT_H__
